<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenNETCF.Net</name>
    </assembly>
    <members>
        <member name="T:OpenNETCF.Net.AccessPoint">
            <summary>
            The SSID class represents a single SSID value which
            an adapter might be receiving data from.  It can be
            queried for SSID-specific information for the
            associated adapter such as signal strength.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.AccessPoint.ToString">
            <summary>
            Return the name of the AccessPoint
            </summary>
            <returns>
            string name of the access point
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.AccessPoint.Name">
            <summary>
            The SSID name string.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.AccessPoint.MacAddress">
            <summary>
            The hardware address for the network adapter.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.AccessPoint.Privacy">
            <summary>
            The privacy mask for the adapter.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.AccessPoint.SignalStrengthInDecibels">
            <summary>
            Returns the strength of the RF Ethernet signal
            being received by the adapter for the SSID, in dB.
            </summary>
            <returns>
            integer strength in dB; zero, if adapter is not
            an RF adapter or an error occurred
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.AccessPoint.SignalStrength">
            <summary>
            Returns the strength of the RF Ethernet signal
            being received by the adapter for the SSID, in dB.
            </summary>
            <returns>
            SignalStrength instance containing the strength
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.AccessPoint.SupportedRates">
            <summary>
            Returns the list of supported signaling rates for
            the adapter.  Each value indicates a single rate.
            </summary>
            <returns>
            array of bytes, each of which represents a rate.
            The units are 0.5Mbps.  Rates that belong to the
            'basic rate set' have their high bits set to 1
            (they are OR-ed with 0x80).  Rates which are not
            in the basic rate set, have this bit clear.
            So, a value of 0x96, after clearing the
            high bit, is 0x16 or 22d.  Multiplying by 0.5Mbps 
            gives a rate of 11Mbps.  Since the high bit was
            set, this rate is in the basic rate set.
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.AccessPoint.NetworkTypeInUse">
            <summary>
            Returns the current type of network in use in
            the form of an element of the 
            Ndis80211NetworkType enumeration.
            </summary>
            <returns>
            Ndis80211NetworkType network type
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.AccessPoint.InfrastructureMode">
            <summary>
            Returns the current infrastructure in use by the
            adapter.
            </summary>
            <returns>
            Ndis80211NetworkInfrastructure type
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.AccessPoint.Channel">
            <summary>
            Returns the active channel of the RF Ethernet signal
            being received by the adapter for the SSID
            </summary>
            <returns>
            Active channel of AP
            </returns>
        </member>
        <member name="T:OpenNETCF.Net.AccessPointCollection">
            <summary>
            Class that represents a collection of the SSID values
            that a given network adapter can hear over the 
            airwaves.  For each SSID, you can get the signal
            strength and random other information.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.AccessPointCollection.Refresh">
            <summary>
            Refresh the list of SSID values, asking the 
            adapter to scan for new ones, also.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.AccessPointCollection.FindBySSID(System.String)">
            <summary>
            Find a given access point in the collection by
            looking for a matching SSID value.
            </summary>
            <param name="ssid">
            String SSID to search for.
            </param>
            <returns>
            First AccessPoint in the collection with the 
            indicated SSID, or null, if none was found.
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.AccessPointCollection.AssociatedAdapter">
            <summary>
            The Adapter instance with which the SSID instance
            is associated.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.AccessPointCollection.Item(System.Int32)">
            <summary>
            Indexer for contained AccessPoints
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Adapter">
            <summary>
            Class representing a single instance of a network
            adapter, which might include PCMCIA cards, USB network
            cards, built-in Ethernet chips, etc.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Adapter.StrengthFetcher">
            <summary>
            Field, if set, is used, if the NDISUIO method
            fails, to get the RF signal strength.  You might 
            use this on an OS earlier than 4.0, when NDISUIO
            became available.  You'd usually create your own
            subclass of StrengthAddon, then assign an instance
            of that subclass to this property, then ask for
            the signal strength.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.BindAdapter">
            <summary>
            Method called on unbound adapter (maybe when handling
            changing *both* the IP/subnet/gateway *and* the wireless
            settings).  This method notifies NDIS to bind the 
            adapter to all protocols indicated in the registry, in 
            effect causing the current registry settings to be 
            applied rather than those which the adapter is currently
            using.  Since we are binding, not *re*-binding the
            protocols, we are implying that the adapter is not
            currently bound to anything.  When making this call,
            we must refresh any adapter list that we might have,
            to retrieve the current state of all adapters.  
            Changes to things like the IP address, subnet mask, 
            etc. are not immediately returned.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.RebindAdapter">
            <summary>
            Method called after making some changes to the current
            IP address, subnet mask, etc.  This method notifies NDIS
            to rebind the adapter to all protocols, in effect causing
            the current registry settings to be applied rather than
            those which the current configuration represents.  Once you
            have rebound an adapter, to get its new configuration, you
            must regenerate the list of adapters.  Changes to things
            like the IP address, subnet mask, etc. are not immediately 
            returned.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.UnbindAdapter">
            <summary>
            Method called to unbind a given adapter.  You might
            perform this operation before attempting to change
            *both* the protocol configuration of an adapter (IP,
            subnet, gateway), *and* the wireless configuration of
            the same adapter (WEP, SSID, etc.)  To do that, first
            unbind the adapter, then change the settings, then
            bind the adapter (UnbindAdapter(), make changes,
            BindAdapter()).  Once you have bound/unbound an 
            adapter, to get its new configuration, you must 
            regenerate the list of adapters.  Changes to things
            like the IP address, subnet mask, etc. are not 
            immediately returned.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.ToString">
            <summary>
            Converts the Adapter to a string representation.  We 
            use the adapter's name for this.
            </summary>
            <returns>
            string representing the adapter
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.MakeSSIDEntry(System.String,System.Boolean,System.Byte[],System.Int32,OpenNETCF.Net.AuthenticationMode,OpenNETCF.Net.WEPStatus)">
            <summary>
            This routine is used, internally, to make entries
            for the preferred SSID list.  It centralizes the
            mapping of key data into the structure, etc.
            </summary>
            <param name="SSID">
            The SSID string for the new entry
            </param>
            <param name="bInfrastructure">
            Set to true for infrastucture mode; false for
            ad hoc mode
            </param>
            <param name="Key">
            WEP key material
            </param>
            <param name="keyIndex">
            Key index.  Valid values are 1-4
            </param>
            <param name="authMode">
            Authentication mode for the connection
            </param>
            <param name="privacyMode">
            Privacy (encryption) mode for the connection
            </param>
            <returns>
            New WZC_WLAN_CONFIG object or null on failure
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.ProcessKey(OpenNETCF.Net.Adapter.KeyType,OpenNETCF.Net.WLANConfiguration@,System.String)">
            <summary>
            The ProcessKey routine makes necessary modifications
            to the key material of a WPA key before it is passed
            to WZC routines.  The processing done to it depends
            on how it was generated.
            </summary>
            <param name="kt">
            The key type, indicating how the key material in
            the structure was originally generated
            </param>
            <param name="config">
            The configuration being changed
            </param>
            <param name="passphrase">
            For WPA-PSK passphrase type, the passphrase.
            </param>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.CheckKeySize(System.String,OpenNETCF.Net.AuthenticationMode,System.Byte[]@)">
            <summary>
            The CheckKeySize routine checks the incoming 
            WEP or WPA key from the user and throws an 
            exception of an appropriate type, if the key
            size is wrong or if it contains invalid
            characters.  In this case, it also maps the
            string key into a byte array of the binary
            values corresponding to the string, which should
            represent the hex values in the key.
            </summary>
            <param name="sKey">
            The string key to be used.  Must consist of a
            string of hexadecimal digits, for WEP keys and
            WPA binary keys.  May be a passphrase for WPA-PSK,
            though, which can be 8-63 characters long.
            </param>
            <param name="authMode">
            Can be any of the authentication mode types, 
            including WEP and WPA-PSK.
            </param>
            <param name="Key">
            Reference parameter into which the returned
            binary key value is written.  Will be set to
            null if the input string key is empty.
            </param>
            <returns>
            KeyType value indicating the type of the key. Note:
            for WPAPassphrase type, the caller will still have
            to encode the password before using it (Key is not
            set).  Note: for WPABinary type, the caller will
            still have to encrypt the key, although it is
            converted from hex string to binary by this routine.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.CheckKeySize(System.Byte[],OpenNETCF.Net.AuthenticationMode)">
            <summary>
            The CheckKeySize routine checks the incoming 
            WEP or WPA key from the user and throws an 
            exception of an appropriate type, if the key
            size is wrong.
            </summary>
            <param name="Key">
            The binary key to be used.
            </param>
            <param name="authMode">
            Can be any of the authentication mode types, 
            including WEP and WPA-PSK.
            </param>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.SetWirelessSettings(System.String,System.Boolean,System.String)">
            <summary>
            Modifies wireless settings associated with a given interface and AP
            </summary>
            <param name="SSID">Target SSID to connect</param>
            <param name="bInfrastructure">Is infrastructure</param>
            <param name="sKey">WEP key</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.SetWirelessSettings(System.String,System.Boolean,System.Byte[])">
            <summary>
            Modifies wireless settings associated with a given interface and AP
            </summary>
            <param name="SSID">Target SSID to connect</param>
            <param name="bInfrastructure">Is infrastructure</param>
            <param name="Key">binary wep key - 5 or 13 bytes</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.SetWirelessSettingsEx(System.String,System.Boolean,System.String,OpenNETCF.Net.AuthenticationMode)">
            <summary>
            Sets wireless settings associated with a given 
            interface and AP.  This version of the method is
            designed for the case where *all* of the options
            are going to be set, where no initial configuration
            exists at all.
            </summary>
            <param name="SSID">Target SSID to connect</param>
            <param name="bInfrastructure">Is infrastructure</param>
            <param name="sKey">wep key string representing hex string (each two characters are converted to a single byte)</param>
            <param name="authMode">Authentication mode for the connection</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.SetWirelessSettingsEx(System.String,System.Boolean,System.Byte[],OpenNETCF.Net.AuthenticationMode)">
            <summary>
            Sets wireless settings associated with a given 
            interface and AP.  This version of the method is
            designed for the case where *all* of the options
            are going to be set, where no initial configuration
            exists at all.
            </summary>
            <param name="SSID">Target SSID to connect</param>
            <param name="bInfrastructure">Is infrastructure</param>
            <param name="Key">binary wep key - 5 or 13 bytes</param>
            <param name="authMode">Authentication mode for the connection</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.SetWirelessSettings(System.String)">
            <summary>
            Attaches to an existing SSID value which *must* already be
            on the preferred list.  Settings are copied from when the 
            AP was added to the preferred list.  This allows you to 
            connect to a preconfigured SSID value without respecifying
            the WEP key, etc.
            </summary>
            <param name="SSID">Target SSID to connect</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.SetWirelessSettingsAddEx(System.String,System.Boolean,System.String,System.Int32,OpenNETCF.Net.AuthenticationMode,OpenNETCF.Net.WEPStatus,OpenNETCF.Net.EAPParameters)">
            <summary>
            Sets wireless settings associated with a given 
            interface and AP, adding to, rather than replacing
            the preferred list of APs.  This version of the 
            method is designed for the case where *all* of 
            the options are going to be set, where no initial 
            configuration exists at all and where existing
            items in the preferred list should be maintained.
            After this method executes, if it is successful,
            the specified SSID will be at the top, highest-
            priority, end of the preferred list.
            </summary>
            <param name="SSID">
            Target SSID to connect
            </param>
            <param name="bInfrastructure">
            Is infrastructure
            </param>
            <param name="sKey">
            WEP key string representing hex string (each 
            two characters are converted to a single byte)
            </param>
            <param name="keyIndex">
            Index of the WEP key.  Valid values are 1-4
            </param>
            <param name="authMode">
            Authentication mode for the connection
            </param>
            <param name="privacyMode">
            Privacy (encryption) mode for the connection
            </param>
            <param name="eapParams">
            Parameters describing how the connection should use EAP
            to authenticate the user to the network
            </param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.SetWirelessSettingsAddEx(System.String,System.Boolean,System.Byte[],System.Int32,OpenNETCF.Net.AuthenticationMode,OpenNETCF.Net.WEPStatus,OpenNETCF.Net.EAPParameters)">
            <summary>
            Sets wireless settings associated with a given 
            interface and AP, adding the new SSID to the
            list of preferred SSID values, rather than 
            replacing the whole list.  This version of the 
            method is designed for the case where *all* of 
            the options are going to be set, where no 
            initial configuration exists at all and where the
            current SSID values in the preferred list should
            be retained.  After this call completes, if it
            is successful, the new SSID is at the top, highest-
            priority, end of the preferred list.
            </summary>
            <param name="SSID">
            Target SSID to connect
            </param>
            <param name="bInfrastructure">
            Is infrastructure
            </param>
            <param name="Key">
            WEP or WPA key.  Key is in binary format. 
            For WEP, it should contain 5 or 13 bytes of data.
            The number of bytes for WPA depends on whether a
            passphrase was used to generate it or whether it
            is the actual 32-byte binary key
            </param>
            <param name="keyIndex">
            Index of the key.  Valid values are 1-4
            </param>
            <param name="authMode">
            Authentication mode for the connection
            </param>
            <param name="privacyMode">
            Privacy (encryption) mode for the connection
            </param>
            <param name="eapParams">
            Parameters describing how the connection should use EAP
            to authenticate the user to the network
            </param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.SetWirelessSettingsAddEx(System.String,System.Boolean,System.Byte[],System.Int32,OpenNETCF.Net.AuthenticationMode,OpenNETCF.Net.WEPStatus,OpenNETCF.Net.Adapter.KeyType,System.String,OpenNETCF.Net.EAPParameters)">
            <summary>
            Sets wireless settings associated with a given 
            interface and AP, adding the new SSID to the
            list of preferred SSID values, rather than 
            replacing the whole list.  This version of the 
            method is designed for the case where *all* of 
            the options are going to be set, where no 
            initial configuration exists at all and where the
            current SSID values in the preferred list should
            be retained.  After this call completes, if it
            is successful, the new SSID is at the top, highest-
            priority, end of the preferred list.
            </summary>
            <param name="SSID">
            Target SSID to connect
            </param>
            <param name="bInfrastructure">
            Is infrastructure
            </param>
            <param name="Key">
            WEP or WPA key.  Key is in binary format. 
            For WEP, it should contain 5 or 13 bytes of data.
            The number of bytes for WPA depends on whether a
            passphrase was used to generate it or whether it
            is the actual 32-byte binary key
            </param>
            <param name="keyIndex">
            Index of the key.  Valid values are 1-4
            </param>
            <param name="authMode">
            Authentication mode for the connection
            </param>
            <param name="privacyMode">
            Privacy (encryption) mode for the connection
            </param>
            <param name="kt">
            Key type of the key.  Should be KeyType.None for 
            external callers
            </param>
            <param name="wpaPassphrase">
            This is a bad way to have to do things, but, short
            of duplicating the code to do the processing for
            the string passphrase case and the binary key case,
            I need to get a WPA passphrase here.  If the key type,
            kt, is not KeyType.WPAPassphrase, the string isn't 
            used, so you can set it to null.
            </param>
            <param name="eapParams">
            Parameters describing how the connection should use EAP
            to authenticate the user to the network
            </param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.RemoveWirelessSettings(System.String)">
            <summary>
            Removes preferred connection with indicated SSID
            value from preferred connection list for the
            adapter.  This is roughly equivalent to using
            the Advanced settings in the WZC dialogs to 
            delete an item from the preferred list.
            </summary>
            <param name="SSID">
            SSID value of list item to remove.
            </param>
            <returns>
            true if successful; false otherwise
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.DhcpRelease">
            <summary>
            Releases the Adapter's DHCP lease
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Adapter.DhcpRenew">
            <summary>
            Renews the Adapter's DHCP lease
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.Name">
            <summary>
            The NDIS/driver assigned adapter name.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.Description">
            <summary>
            The descriptive name of the adapter.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.Index">
            <summary>
            The index in NDIS' list of adapters where this
            adapter is found.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.Type">
            <summary>
            The adapter type.  Adapters can be standard
            Ethernet, RF Ethernet, loopback, dial-up, etc.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.MacAddress">
            <summary>
            The hardware address associated with the adapter.
            For Ethernet-based adapters, including RF Ethernet
            adapters, this is the Ethernet address.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.DhcpEnabled">
            <summary>
            Indicator of whether DHCP (for IP address 
            assignment from a server), is enabled for the
            adapter.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.CurrentIpAddress">
            <summary>
            The currently active IP address of the adapter.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.CurrentSubnetMask">
            <summary>
            The currently active subnet mask address of the 
            adapter.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.Gateway">
            <summary>
            The active gateway address.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.DhcpServer">
            <summary>
            The DHCP server from which the IP address was
            last assigned.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.WEPStatus">
            <summary>
            Gets the WEP status for the current adapter
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.AuthMode">
            <summary>
            Gets the AuthenticationMode for the current adapter
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.WZCFallbackEnabled">
            <summary>
            Enables or disables WZC Fallback for the current adapter
            </summary>
            <returns>
            Returns true/false if WZC Fallback is enabled for the current adapter
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.HasWins">
            <summary>
            Indicates the presence of WINS server addresses
            for the adapter.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.PrimaryWinsServer">
            <summary>
            The IP address of the primary WINS server for the
            adapter.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.SecondaryWinsServer">
            <summary>
            The IP address of the secondary WINS server for the
            adapter.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.LeaseObtained">
            <summary>
            The date/time at which the IP address lease was
            obtained from the DHCP server.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.LeaseExpires">
            <summary>
            The date/time at which the IP address lease from
            the DHCP server will expire (at which time the
            adapter will have to contact the server to renew
            the lease or stop using the IP address).
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.IsWireless">
            <summary>
            Returns a Boolean indicating if the adapter is
            an RF Ethernet adapter.
            </summary>
            <returns>
            true if adapter is RF Ethernet; false otherwise
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.IsWirelessZeroConfigCompatible">
            <summary>
            Returns a Boolean indicating if the adapter is
            supported by WZC.
            </summary>
            <returns>
            true if adapter is supported by WZC; false otherwise
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.AssociatedAccessPoint">
            <summary>
            Returns the currently-attached SSID for RF
            Ethernet adapters.
            </summary>
            <returns>
            Instance of SSID class (or null if not associated).
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.SignalStrengthInDecibels">
            <summary>
            Returns the strength of the RF Ethernet signal
            being received by the adapter, in dB.
            </summary>
            <returns>
            integer strength in dB; zero, if adapter is not
            an RF adapter or an error occurred
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.SignalStrength">
            <summary>
            Returns a SignalStrength class representing the current strength
            of the signal.
            </summary>
            <returns>
            SignalStrength
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.NearbyAccessPoints">
            <summary>
            Returns a list of the SSID values which the 
            adapter can currently 'hear'.
            </summary>
            <returns>
            SSIDList instance containing the SSIDs.
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.PreferredAccessPoints">
            <summary>
            Returns the list of preferred SSID values which the 
            adapter is currently assigned.  Note that none of
            these might be within range, however.
            </summary>
            <returns>
            SSIDList instance containing the preferred SSIDs.
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.Adapter.NearbyPreferredAccessPoints">
            <summary>
            Returns the list of preferred SSID values which the 
            adapter is currently assigned, but also updates the
            signal strengths to their current values.  Otherwise,
            the signal strengths are not really valid.
            </summary>
            <returns>
            SSIDList instance containing the preferred SSIDs.
            </returns>
        </member>
        <member name="T:OpenNETCF.Net.Adapter.KeyType">
            <summary>
            The KeyType enumeration tells the Adapter what
            sort of key material is being passed.  There are
            several types for various forms of WEP and WPA
            keys.  External callers of Adapter methods should
            set it to None, however.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.WZCPInvokes">
            <summary>
            P/Invoke definitions for WZC API
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.AdapterCollection">
            <summary>
            Class that represents a collection of network adapters 
            connected to the Windows CE device.  Each adapter can 
            be queried for information such as the signal strength 
            (RF only), the activity state, etc.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.AdapterCollection.#ctor">
            <summary>
            Constructor loads the list by querying the 
            operating system for the list of adapters which
            are currently connected.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.AdapterCollection.Refresh">
            <summary>
            Clears and reconstructs the list of adapters,
            based on the current hardware connections to the
            device.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.AdapterCollection.Item(System.Int32)">
            <summary>
            Indexer for contained Adapters
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.AdapterException">
            <summary>
            The AdapterException class indicates an exception during
            an adapter query, modification, or other operation.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.AdapterException.#ctor">
            <summary>
            Basic constructor.  No message or error code number.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.AdapterException.#ctor(System.String)">
            <summary>
            Basic constructor using the message string of the base
            class.
            </summary>
            <param name="message">
            Message string for base class
            </param>
        </member>
        <member name="M:OpenNETCF.Net.AdapterException.#ctor(System.Int32)">
            <summary>
            Constructor to which additional error code information,
            perhaps from a Windows Zero Config call, might be passed.
            </summary>
            <param name="errcode">
            Error code, available for return from HRESULT member.
            </param>
        </member>
        <member name="M:OpenNETCF.Net.AdapterException.#ctor(System.Int32,System.String)">
            <summary>
            Constructor which takes both string message (passed to
            base Exception class), and error code value.
            </summary>
            <param name="errcode">
            Error code, available for return from HRESULT member.
            </param>
            <param name="message">
            Message string for base class
            </param>
        </member>
        <member name="T:OpenNETCF.Net.AdapaterNotificationEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:OpenNETCF.Net.AdapterNotificationEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:OpenNETCF.Net.AdapterNotificationArgs">
            <summary>
            Arguments for Adapter Notifications
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AdapterNotificationArgs.AdapterName">
            <summary>
            Adapter Name
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AdapterNotificationArgs.NotificationType">
            <summary>
            Type of Notification
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.AdapterStatusMonitor">
            <summary>
            Class giving the ability to monitor NDIS adapters for changes
            in their state.  When a change is detected, an event is fired
            to all interested parties.  The parameters of the event indicate
            the type of status change and the name of the adapter which
            changed.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.AdapterStatusMonitor.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.AdapterStatusMonitor.StartStatusMonitoring">
            <summary>
            Initiates a worker thread to listen for NDIS-reported
            changes to the status of the adapter.  Listeners can
            register for notification of these changes, which the
            thread will send.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.AdapterStatusMonitor.StopStatusMonitoring">
            <summary>
            Stops the worker thread which monitors for changes of status
            of the adapter.  This must be done, if monitoring has been
            started, before the object is destroyed.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.AdapterStatusMonitor.OnAdapterNotification(OpenNETCF.Net.AdapterNotificationArgs)">
            <summary>
            Raises the AdapterNotification event.
            </summary>
            <param name="e">
            An EventArgs that contains the event data.
            </param>
        </member>
        <member name="E:OpenNETCF.Net.AdapterStatusMonitor.AdapterNotification">
            <summary>
            Event fired when some aspect of the adapter's configuration
            or state has changed.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.AdapterStatusMonitor.Active">
            <summary>
            The Active property is true when the status is
            being monitored.  If status monitoring is not
            occurring, Active is false.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.AdapterType">
            <summary>
            Different NIC adapter types
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AdapterType.Unknown">
            <summary>
            Unknown or unresolvable adapter type
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AdapterType.Other">
            <summary>
            Adapter type not known at compile time
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AdapterType.Ethernet">
            <summary>
            Ethernet adapter.  Also includes RF Ethernet
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AdapterType.TokenRing">
            <summary>
            Token ring adapter
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AdapterType.FDDI">
            <summary>
            Fiber optic adapter
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AdapterType.PPP">
            <summary>
            Dial-up/serial adapter using PPP protocol
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AdapterType.Loopback">
            <summary>
            Loopback adapter
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AdapterType.SLIP">
            <summary>
            Dial-up/serial adapter using SLIP protocol
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.ConnectionDetail">
            <summary>
            This class contains detailed information about the status of available connections.
            </summary>
            <remarks>
            When ConnectionDetail contains information about the status of a Wi-Fi connection, the Description field contains the name of the service set identifier (SSID) used to connect to the network.
            </remarks>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionDetail.Version">
            <summary>
            Version of the structure. The current version is set to CONNMGRDETAILEDSTATUS_VERSION. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionDetail.DetailStatusParam">
            <summary>
            Combination of Connection Manager detailed status parameter constants. See DetailStatusParam
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionDetail.IPAddress">
            <summary>
            Available IP addresses, set to NULL, if no IP address is available. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionDetail.SignalQuality">
            <summary>
            Quality of the signal, can be a value between 0 and 255. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionDetail.LastConnectionTime">
            <summary>
            Time the connection was last established. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionDetail.ConnectionStatus">
            <summary>
            One of the Connection Manager status constants. For possible values, see ConnectionStatus
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionDetail.AdapterName">
            <summary>
            Null-terminated name of the adapter. If no adapter name is available, this parameter must be set to NULL. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionDetail.Description">
            <summary>
            Name of the connection specified in a null-terminated string. If no name is available, this parameter must be set to NULL. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionDetail.SourceNetwork">
            <summary>
            GUID of the source network. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionDetail.DestinatonNetwork">
            <summary>
            GUID of the destination network. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionDetail.Secure">
            <summary>
            The security level of the connection. The security level corresponds with the connection type. If the security level is greater than zero, the connection is secure.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionDetail.ConnectionOption">
            <summary>
            One or more connection options. For possible values, see ConnectionOption
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionDetail.ConnectionSubType">
            <summary>
            One of the connection subtype constants. For possible values, see ConnectionSubType
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionDetail.ConnectionType">
            <summary>
            One of the connection type constants. For possible values, see ConnectionType
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.Connect">
            <summary>
            Makes an exclusive, asynchronous connection with Connection Manager using the system default destination. 
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.Connect(System.Boolean)">
            <summary>
            Makes an asynchronous connection with Connection Manager using the system default destination.
            </summary>
            <param name="exclusive">True creates an exclusive connection; false creates a non-exclusive connection.</param>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.Connect(OpenNETCF.Net.ConnectionMode)">
            <summary>
            Makes an exclusive connection with Connection Manager using the system default destination.
            </summary>
            <param name="mode">States how the connection is to be made: either Synchronous or Asynchronous</param>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.Connect(System.Boolean,OpenNETCF.Net.ConnectionMode)">
            <summary>
            Makes a connection with Connection Manager using the system default destination.
            </summary>
            <param name="exclusive">True creates an exclusive connection; false creates a non-exclusive connection.</param>
            <param name="mode">States how the connection is to be made: either Synchronous or Asynchronous</param>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.Connect(System.Guid,System.Boolean,OpenNETCF.Net.ConnectionMode)">
            <summary>
            Makes a connection with Connection Manager using the specified destination.
            </summary>
            <param name="destGuid">The destination to connect to.</param>
            <param name="exclusive">Determines whether the connection should be exclusive or not.</param>
            <param name="mode">Determines how the connection is to be made: either Synchronous or Asynchronous</param>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.Disconnect">
            <summary>
            Disconnect the connection whose handle is hConnection.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.RequestDisconnect">
            <summary>
            Disconnect the connection whose handle is hConnection.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.MapUrl(System.String)">
            <summary>
            Maps a URL to a destination GUID.
            </summary>
            <param name="Url">The URL to map.</param>
            <returns>The GUID the URL is mapped to.</returns>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.EnumDestinations">
            <summary>
            Returns a collection of destinations specified within the system.
            </summary>
            <returns>A DestinationInfo collection with details of all the destinations in the system.</returns>
        </member>
        <member name="E:OpenNETCF.Net.ConnectionManager.ConnectionDetailItemsChanged">
            <summary>
            Occurs when the connection detail item list changes
            </summary>
        </member>
        <member name="E:OpenNETCF.Net.ConnectionManager.Connected">
            <summary>
            Occurs when a connection is opened.
            </summary>
        </member>
        <member name="E:OpenNETCF.Net.ConnectionManager.Disconnected">
            <summary>
            Occurs when a connection is closed.
            </summary>
        </member>
        <member name="E:OpenNETCF.Net.ConnectionManager.ConnectionStateChanged">
            <summary>
            Occurs when the connection state is changed.
            </summary>
        </member>
        <member name="E:OpenNETCF.Net.ConnectionManager.ConnectionFailed">
            <summary>
            Occurs when a connection fails.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionManager.Handle">
            <summary>
            Returns a handle to the current connection.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionManager.Status">
            <summary>
            Describes the current state of the connection
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionManager.Timeout">
            <summary>
            Specifies the timeout for a synchronous connection attempt
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.ConnectionInfo">
            <summary>
            Summary description for ConnectionInfo.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.DestinationInfo">
            <summary>
            Contains information about a specific network.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.DestinationInfo.NativeSize">
            <summary>
            Size of the DestinationInfo structure in unmanaged memory.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.DestinationInfo.Guid">
            <summary>
            The destination's GUID identifier.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.DestinationInfo.Description">
            <summary>
            The destination's description.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.DestinationInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.DestinationInfo.#ctor(System.IntPtr)">
            <summary>
            Creates a new instance of DestinationInfo at the specific memory address.
            </summary>
            <param name="baseAddr">Memory address where the DestinationInfo object should be created.</param>
        </member>
        <member name="T:OpenNETCF.Net.DestinationInfoCollection">
            <summary>
            Summary description for DestinationInfoCollection.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.GPRS">
            <summary>
            GPRS
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.XRTT">
            <summary>
            Not distinct from GPRS.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.EVDO">
            <summary>
            Not distinct from GPRS.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.XEVDV">
            <summary>
            Not distinct from GPRS.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.EDGE">
            <summary>
            Not distinct from GPRS.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.UMTS">
            <summary>
            Not distinct from GPRS.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.Voice">
            <summary>
            Voice
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.PTT">
            <summary>
            Push-to-Talk (not supported)
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.HSDPA">
            <summary>
            High-Speed Downlink Packet Access (3.5G).
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.Ethernet">
            <summary>
            Wired Ethernet
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.WiFi">
            <summary>
            Wireless
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.RAS">
            <summary>
            Remote Access Services
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.PAN">
            <summary>
            Personal Area Network
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.NullModem">
            <summary>
            Direct Cable Connect (DCC)
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.ExternalModem">
            <summary>
            Serial port attached modem
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.IRCommModem">
            <summary>
            DCC over Irda
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.DynamicModem">
            <summary>
            Bluetooth modem
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionSubType.DynamicPort">
            <summary>
            DCC over Bluetooth
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionOption.BilledByTime">
            <summary>
            Connection is billed by time.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionOption.AlwaysOn">
            <summary>
            Connection is always on.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionOption.SuspendResumeCapable">
            <summary>
            Connection is suspend/resume capable.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.ConnectionPriority">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.Voice">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.UserInteractive">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.UserBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.UserIdle">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.HighPriorityBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.IdleBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.ExternalInteractive">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.LowBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.Cached">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.ConnectionStatus">
            <summary>
            Describes the current status of the connection
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.Unknown">
            <summary>
            Unknown status
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.Connected">
            <summary>
            Connection is up
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.Disconnected">
            <summary>
            Connection is disconnected
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.ConnectionFailed">
            <summary>
            Connection failed and cannot not be re-established
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.ConnectionCancelled">
            <summary>
            User aborted connection
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.ConnectionDisabled">
            <summary>
            Connection is ready to connect but disabled
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.NoPathToDestination">
            <summary>
            No path could be found to destination
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.WaitingForPath">
            <summary>
            Waiting for a path to the destination
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.WaitingForPhone">
            <summary>
            Voice call is in progress
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.WaitingConnection">
            <summary>
            Attempting to connect
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.WaitingForResource">
            <summary>
            Resource is in use by another connection
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.WaitingForNetwork">
            <summary>
            No path could be found to destination
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.WaitingDisconnection">
            <summary>
            Connection is being brought down
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.WaitingConnectionAbort">
            <summary>
            Aborting connection attempt
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.ConnectionMode">
            <summary>
            The type of connection to establish
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionMode.Synchronous">
            <summary>
            Connect synchronously
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionMode.Asynchronous">
            <summary>
            Connect asynchronously
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.EAPParameters">
            <summary>
            EAP Wireless LAN authentication descriptor
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPParameters.SizeOf">
            <summary>
            The size of the 'structure' which this class
            represents, in bytes
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.EAPParameters.#ctor">
            <summary>
            Create an 'empty' instance of the EAP configuration
            parameter structure.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.EAPParameters.Enable8021x">
            <summary>
            Enable 802.1x authentication
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.EAPParameters.EapFlags">
            <summary>
            EAP flags
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.EAPParameters.EapType">
            <summary>
            EAP type
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.EAPParameters.AuthDataLen">
            <summary>
            Length of EAP provider-specific authentication data
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.EAPParameters.AuthData">
            <summary>
            The actual provider-specific authentication data
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.EAPParameters.Data">
            <summary>
            Return ***copy*** of data in the structure.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.AccessPoint">
            <summary>
            The SSID class represents a single SSID value which
            an adapter might be receiving data from.  It can be
            queried for SSID-specific information for the
            associated adapter such as signal strength.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.AccessPoint.ToString">
            <summary>
            Return the name of the AccessPoint
            </summary>
            <returns>
            string name of the access point
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.AccessPoint.Name">
            <summary>
            The SSID name string.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.AccessPoint.PhysicalAddress">
            <summary>
            The hardware address for the network adapter.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.AccessPoint.Privacy">
            <summary>
            The privacy mask for the adapter.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.AccessPoint.SignalStrengthInDecibels">
            <summary>
            Returns the strength of the RF Ethernet signal
            being received by the adapter for the SSID, in dB.
            </summary>
            <returns>
            integer strength in dB; zero, if adapter is not
            an RF adapter or an error occurred
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.AccessPoint.SignalStrength">
            <summary>
            Returns the strength of the RF Ethernet signal
            being received by the adapter for the SSID, in dB.
            </summary>
            <returns>
            SignalStrength instance containing the strength
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.AccessPoint.SupportedRates">
            <summary>
            Returns the list of supported signaling rates for
            the adapter.  Each value indicates a single rate.
            </summary>
            <returns>
            An array of supported rates in kilobits per second
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.AccessPoint.NetworkTypeInUse">
            <summary>
            Returns the current type of network in use in
            the form of an element of the 
            Ndis80211NetworkType enumeration.
            </summary>
            <returns>
            Ndis80211NetworkType network type
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.AccessPoint.InfrastructureMode">
            <summary>
            Returns the current infrastructure in use by the
            adapter.
            </summary>
            <returns>
            Ndis80211NetworkInfrastructure type
            </returns>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.AccessPointCollection">
            <summary>
            Class that represents a collection of the SSID values
            that a given network adapter can hear over the 
            airwaves.  For each SSID, you can get the signal
            strength and random other information.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.AccessPointCollection.Refresh">
            <summary>
            Refresh the list of SSID values, asking the 
            adapter to scan for new ones, also.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.AccessPointCollection.FindBySSID(System.String)">
            <summary>
            Find a given access point in the collection by
            looking for a matching SSID value.
            </summary>
            <param name="ssid">
            String SSID to search for.
            </param>
            <returns>
            First AccessPoint in the collection with the 
            indicated SSID, or null, if none was found.
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.AccessPointCollection.AssociatedAdapter">
            <summary>
            The Adapter instance with which the SSID instance
            is associated.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.AccessPointCollection.Item(System.Int32)">
            <summary>
            Indexer for contained AccessPoints
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.ArpEntry">
            <summary>
            Encapsulates an entry in the ARP table
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpEntry.Clone">
            <summary>
            Creates a copy of this IPForwardEntry
            </summary>
            <returns>A shallow copy of the current IPForwardEntry</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpEntry.#ctor(OpenNETCF.Net.NetworkInformation.NetworkInterface,System.Net.IPAddress,OpenNETCF.Net.NetworkInformation.PhysicalAddress,OpenNETCF.Net.NetworkInformation.ArpEntryType)">
            <summary>
            Creates an instance of an ArpEntry
            </summary>
            <param name="adapter">NetworkInterface on the local machine with which this entry will be associated</param>
            <param name="address">IP Address of the entry</param>
            <param name="mac">Physical (MAC) address of the entry</param>
            <param name="entryType">Type of the entry</param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpEntry.Equals(System.Object)">
            <summary>
            Compares two ArpEntry objects
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpEntry.GetHashCode">
            <summary>
            Returns a hash value for an ArpEntry
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.ArpEntry.NetworkInterface">
            <summary>
            Gets the NetworkInterface that this ARP table entry is associated with
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.ArpEntry.PhysicalAddress">
            <summary>
            Gets the physical address of the device
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.ArpEntry.IPAddress">
            <summary>
            Gets the IP Address of the device
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.ArpEntry.ArpEntryType">
            <summary>
            Gets the type of ARP entry
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.ArpEntryType">
            <summary>
            Specifies the type of an ARP entry
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.ArpEntryType.Static">
            <summary>
            A static entry
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.ArpEntryType.Dynamic">
            <summary>
            A dynamic entry
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.ArpEntryType.Invalid">
            <summary>
            An invalid entry
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.ArpEntryType.Other">
            <summary>
            Entry is non-determinable
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.ArpTable">
            <summary>
            This class represents the IP-to-physical address mapping table (ARP table) for all NetworkInterfaces on the local device
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpTable.GetArpTable">
            <summary>
            Gets the local device's IP Routing Table
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpTable.Add(OpenNETCF.Net.NetworkInformation.ArpEntry)">
            <summary>
            This function creates an Address Resolution Protocol (ARP) entry in the ARP table on the local computer
            </summary>
            <param name="item">ArpEntry to add to the table</param>
            <exception cref="T:OpenNETCF.Net.NetworkInformation.NetworkInformationException">
            The Win32 call to CreateIpNetEntry failed
            </exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpTable.Refresh">
            <summary>
            repopulates the internal ARP list
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpTable.Clear(OpenNETCF.Net.NetworkInformation.NetworkInterface)">
            <summary>
            Clears all ARP entries for the specified NetworkInterface
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpTable.Clear">
            <summary>
            Clears all ARP entries for all NetworkInterfaces
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpTable.Contains(OpenNETCF.Net.NetworkInformation.ArpEntry)">
            <summary>
            Checks whether the collection contains the specified System.Net.NetworkInformation.ArpEntry
            object.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpTable.CopyTo(OpenNETCF.Net.NetworkInformation.ArpEntry[],System.Int32)">
            <summary>
            Copies the collection to the specified array.
            </summary>
            <param name="array">A one-dimensional array that receives a copy of the collection.</param>
            <param name="arrayIndex">The zero-based index in array at which the copy begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">
            array is multidimensional.-or- offset is equal to or greater than the length
            of array.-or- The number of elements in this OpenNETCF.Net.NetworkInformation.ArpEntry
            is greater than the available space from offset to the end of the destination
            array.
            </exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpTable.Remove(OpenNETCF.Net.NetworkInformation.ArpEntry)">
            <summary>
            This function deletes an ARP entry from the ARP table on the local computer
            </summary>
            <param name="item">ArpEntry to remove</param>
            <returns>true if removal was successful, otherwise false</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpTable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the routes in the table
            </summary>
            <returns>An IEnumerator</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpTable.SendArpRequest(System.Net.IPAddress)">
            <summary>
            This function sends an ARP request to obtain the physical address that corresponds to the specified destination IP address.
            </summary>
            <param name="destination">Specifies the destination IP address. The ARP request attempts to obtain the physical address that corresponds to this IP address.</param>
            <returns>The physical address that corresponds to the IP address specified by the destination parameter</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpTable.SendArpRequest(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            This function sends an ARP request to obtain the physical address that corresponds to the specified destination IP address.
            </summary>
            <param name="destination">Specifies the destination IP address. The ARP request attempts to obtain the physical address that corresponds to this IP address.</param>
            <param name="source">Specifies the IP address of the sender.</param>
            <returns>The physical address that corresponds to the IP address specified by the destination parameter</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpTable.CreateProxyArpEntry(OpenNETCF.Net.NetworkInformation.NetworkInterface,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            This function creates a Proxy Address Resolution Protocol (PARP) entry on the local computer for the specified IP address.
            </summary>
            <param name="adapter">The NetworkInterface on which to proxy ARP for the IP address specified by the address parameter. In other words, when an ARP request for address is received on this interface, the local computer responds with the physical address of this interface. If this interface is of a type that does not support ARP, such as PPP, then the call fails.</param>
            <param name="address">Specifies the IP address for which this computer acts as a proxy. The address must meet the following condition: (address &amp; mask) == address.</param>
            <param name="mask">Specifies the mask for the IP address specified by the dwAddress parameter. This can be either a host mask, for example, 255.255.255.255, or a subnet mask. If a host mask is used, a proxy is created only for the specified address. If a subnet mask is used, a proxy is created for all IP addresses within the subnet, except for the subnet broadcast address. In the subnet broadcast address, unmasked bits are either all set to zero (0) or all set to 1. </param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpTable.DeleteProxyArpEntry(OpenNETCF.Net.NetworkInformation.NetworkInterface,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            This function deletes the PARP entry on the local computer specified by the address and adapter parameters.
            </summary>
            <param name="adapter">The NetworkInterface on which this computer is supporting proxy ARP for the IP address specified by the address parameter</param>
            <param name="address">The IP address for which this computer is acting as a proxy. </param>
            <param name="mask">The subnet mask for the IP address specified by the address parameter.</param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.ArpTable.Dispose">
            <summary>
            Releases resources for the ARP table
            </summary>
        </member>
        <member name="E:OpenNETCF.Net.NetworkInformation.ArpTable.OnChange">
            <summary>
            Fired when the ARP table changes
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.ArpTable.Count">
            <summary>
            Gets the number of OpenNETCF.Net.NetworkInformation.ArpEntry types
            in this collection.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.ArpTable.Item(System.Int32)">
            <summary>
            Gets or sets an entry in the ARP table based on index
            </summary>
            <param name="index">Position of the entry</param>
            <returns>An ArpEntry instance</returns>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.AuthenticationMode">
            <summary>
            Define authentication types for an adapter.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.AuthenticationMode.Open">
            <summary>
            Specifies IEEE 802.11 Open System authentication mode. In this mode, there are no checks performed during the 802.11 authentication
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.AuthenticationMode.Shared">
            <summary>
            Specifies IEEE 802.11 Shared Key authentication mode. This mode requires the use of a pre-shared Wired Equivalent Privacy (WEP) key for the 802.11 authentication
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.AuthenticationMode.AutoSwitch">
            <summary>
            Specifies auto-switch mode. When using auto-switch mode, the device tries IEEE 802.11 Shared Key authentication mode first. If Shared Key authentication fails, the device attempts to use IEEE 802.11 Open System authentication mode.
            <remarks><b>Note</b> The use of this setting is not recommended</remarks> 
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.AuthenticationMode.WPA">
            <summary>
            Specifies WPA version 1 security for infrastructure mode. Authentication is performed between the supplicant, authenticator, and authentication server over IEEE 802.1X. Encryption keys are dynamic and are derived through the authentication process
            While in this authentication mode, the device will only associate with an access point whose beacon or probe responses contain the authentication suite of type 1 (802.1X) within the WPA information element (IE).
            This authentication mode is only valid for infrastructure network modes. The driver must return NDIS_STATUS_NOT_ACCEPTED if its network mode is set to ad hoc.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.AuthenticationMode.WPAPSK">
            <summary>
            Specifies WPA version 1 security for infrastructure mode. Authentication is made between the supplicant and authenticator over IEEE 802.1X. Encryption keys are dynamic and are derived through a pre-shared key used on both the supplicant and authenticator.
            While in this authentication mode, the device will only associate with an access point whose beacon or probe responses contain the authentication suite of type 2 (pre-shared key) within the WPA information element (IE).
            This authentication mode is only valid for infrastructure network modes. The driver must return NDIS_STATUS_NOT_ACCEPTED if its network mode is set to ad hoc.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.AuthenticationMode.WPAAdHoc">
            <summary>
            Specifies WPA version 1 security for ad hoc mode. This setting specifies the use of a pre-shared key without IEEE 802.1X authentication. Encryption keys are static and are derived through the pre-shared key.
            This authentication mode is only valid for ad hoc network modes. The driver must return NDIS_STATUS_NOT_ACCEPTED if its network mode is set to infrastructure.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.AuthenticationMode.Unknown">
            <summary>
            The authentication mode cannot be determined.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.DuplicateAddressDetectionState">
            <summary>
            Specifies the current state of an IP address.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.DuplicateAddressDetectionState.Invalid">
            <summary>
            The address is not valid. A nonvalid address is expired and no longer assigned
            to an interface; applications should not send data packets to it.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.DuplicateAddressDetectionState.Tentative">
            <summary>
            The duplicate address detection procedure's evaluation of the address has
            not completed successfully. Applications should not use the address because
            it is not yet valid and packets sent to it are discarded.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.DuplicateAddressDetectionState.Duplicate">
            <summary>
            The address is not unique. This address should not be assigned to the network
            interface.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.DuplicateAddressDetectionState.Deprecated">
            <summary>
            The address is valid, but it is nearing its lease lifetime and should not
            be used by applications.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.DuplicateAddressDetectionState.Preferred">
            <summary>
            The address is valid and its use is unrestricted.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.EAPFlags">
            <summary>
            Flags used for controlling how EAP is used
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPFlags.Disabled">
            <summary>
            No EAP
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPFlags.Enabled">
            <summary>
            EAP is on
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPFlags.MachineAuthenticationDisabled">
            <summary>
            EAP authentication by user
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPFlags.MachineAuthenticationEnabled">
            <summary>
            EAP authentication by machine (as opposed to user,
            presumably)
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPFlags.GuestAuthenticationDisabled">
            <summary>
            EAP guest login not allowed
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPFlags.GuestAuthenticationEnabled">
            <summary>
            EAP gues login allowed
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPFlags.DefaultState">
            <summary>
            This is the default configuration for all connections
            in WZC
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPFlags.DefaultMachineAuthentication">
            <summary>
            This is the default state of the machine authentication
            flag in WZC
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPFlags.DefaultGuestAuthentication">
            <summary>
            This is the default state of the guest authentication
            flag in WZC
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPFlags.DefaultWZCFlags">
            <summary>
            This is the default set of flags set by WZC for 
            connections
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.EAPParameters">
            <summary>
            EAP Wireless LAN authentication descriptor
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPParameters.SizeOf">
            <summary>
            The size of the 'structure' which this class
            represents, in bytes
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.EAPParameters.#ctor">
            <summary>
            Create an 'empty' instance of the EAP configuration
            parameter structure.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.EAPParameters.Enable8021x">
            <summary>
            Enable 802.1x authentication
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.EAPParameters.EapFlags">
            <summary>
            EAP flags
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.EAPParameters.EapType">
            <summary>
            EAP type
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.EAPParameters.AuthDataLen">
            <summary>
            Length of EAP provider-specific authentication data
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.EAPParameters.AuthData">
            <summary>
            The actual provider-specific authentication data
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.EAPParameters.Data">
            <summary>
            Return ***copy*** of data in the structure.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.EAPType">
            <summary>
            The EAP_TYPE enumeration is used when configuring a
            connection to an EAP-enabled network.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPType.MD5">
            <summary>
            MD5 authentication
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPType.TLS">
            <summary>
            EAP-TLS authentication
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPType.PEAP">
            <summary>
            PEAP authentication
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.EAPType.MSCHAPv2">
            <summary>
            MS-CHAP version 2 authentication
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.GatewayIPAddressInformation">
            <summary>
            Represents the IP address of the network gateway. This class cannot be instantiated.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.GatewayIPAddressInformation.#ctor">
            <summary>
            Initializes the members of this class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.GatewayIPAddressInformation.Equals(System.Object)">
            <summary>
            Determines if this address is equivalent to the address of another GatewayIPAddressInformation instance
            </summary>
            <param name="obj">A GatewayIPAddressInformation instance</param>
            <returns>true if equivalent, otherwise false</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.GatewayIPAddressInformation.GetHashCode">
            <summary>
            Returns a hash value for a GatewayIPAddressInformation
            </summary>
            <returns>A hash value</returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.GatewayIPAddressInformation.Address">
            <summary>
            Get the IP address of the gateway.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.GatewayIPAddressInformationCollection">
            <summary>
            Stores a set of System.Net.NetworkInformation.GatewayIPAddressInformation
            types.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.GatewayIPAddressInformationCollection.#ctor">
            <summary>
            Initializes a new instance of the System.Net.NetworkInformation.GatewayIPAddressInformationCollection
            class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.GatewayIPAddressInformationCollection.Contains(OpenNETCF.Net.NetworkInformation.GatewayIPAddressInformation)">
            <summary>
            Checks whether the collection contains the specified System.Net.NetworkInformation.GatewayIPAddressInformation
            object.
            </summary>
            <param name="address">
            The System.Net.NetworkInformation.GatewayIPAddressInformation object to be
            searched in the collection.
            </param>
            <returns>
            true if the System.Net.NetworkInformation.GatewayIPAddressInformation object
            exists in the collection; otherwise false.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.GatewayIPAddressInformationCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that can be used to iterate through this collection.
            </summary>
            <returns>
            An object that implements the System.Collections.IEnumerator interface and
            provides access to the System.Net.NetworkInformation.IPUnicastAddressInformation
            types in this collection.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.GatewayIPAddressInformationCollection.op_Explicit(OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection)~OpenNETCF.Net.NetworkInformation.GatewayIPAddressInformationCollection">
            <summary>
            
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.GatewayIPAddressInformationCollection.Item(System.Int32)">
            <summary>
            Gets the System.Net.NetworkInformation.GatewayIPAddressInformation at the
            specific index of the collection.
            </summary>
            <param name="index">
            The index of interest.
            </param>
            <returns>
            The OpenNETCF.Net.NetworkInformation.GatewayIPAddressInformation at the specific
            index in the collection.
            </returns>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics">
            <summary>
            Provides Internet Control Message Protocol for IPv4 (ICMPv4) statistical
            data for the local computer.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.#ctor">
            <summary>
            Initializes a new instance of the OpenNETCF.Net.NetworkInformation.IcmpV4Statistics
            class.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRepliesReceived">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Address
            Mask Reply messages that were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRepliesSent">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Address
            Mask Reply messages that were sent.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRequestsReceived">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Address
            Mask Request messages that were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRequestsSent">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Address
            Mask Request messages that were sent.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.DestinationUnreachableMessagesReceived">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) messages
            that were received because of a packet having an unreachable address in its
            destination.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.DestinationUnreachableMessagesSent">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) messages
            that were sent because of a packet having an unreachable address in its destination.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.EchoRepliesReceived">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Echo
            Reply messages that were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.EchoRepliesSent">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Echo
            Reply messages that were sent.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.EchoRequestsReceived">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Echo
            Request messages that were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.EchoRequestsSent">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Echo
            Request messages that were sent.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.ErrorsReceived">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) error
            messages that were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.ErrorsSent">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) error
            messages that were sent.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.MessagesReceived">
            <summary>
            Gets the number of Internet Control Message Protocol messages that were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.MessagesSent">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) messages
            that were sent.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.ParameterProblemsReceived">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Parameter
            Problem messages that were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.ParameterProblemsSent">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Parameter
            Problem messages that were sent.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.RedirectsReceived">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Redirect
            messages that were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.RedirectsSent">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Redirect
            messages that were sent.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.SourceQuenchesReceived">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Source
            Quench messages that were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.SourceQuenchesSent">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Source
            Quench messages that were sent.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.TimeExceededMessagesReceived">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Time
            Exceeded messages that were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.TimeExceededMessagesSent">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Time
            Exceeded messages that were sent.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.TimestampRepliesReceived">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Timestamp
            Reply messages that were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.TimestampRepliesSent">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Timestamp
            Reply messages that were sent.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.TimestampRequestsReceived">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Timestamp
            Request messages that were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IcmpV4Statistics.TimestampRequestsSent">
            <summary>
            Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Timestamp
            Request messages that were sent.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.InfrastructureMode">
            <summary>
            Define the general network infrastructure mode in
            which the selected network is presently operating.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InfrastructureMode.AdHoc">
            <summary>
            Specifies the independent basic service set (IBSS) mode. This mode is also known as ad hoc mode
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InfrastructureMode.Infrastructure">
            <summary>
            Specifies the infrastructure mode.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InfrastructureMode.AutoUnknown">
            <summary>
            The infrastructure mode is either set to automatic or cannot be determined.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.InterfaceOperationalStatus">
            <summary>
            Operational statii for a NetworkInterface
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InterfaceOperationalStatus.NonOperational">
            <summary>
            LAN adapter has been disabled, for example because of an address conflict.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InterfaceOperationalStatus.Unreachable">
            <summary>
            WAN adapter that is not connected.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InterfaceOperationalStatus.Disconnected">
            <summary>
            For LAN adapters: network cable disconnected. For WAN adapters: no carrier
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InterfaceOperationalStatus.Connecting">
            <summary>
            WAN adapter that is in the process of connecting.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InterfaceOperationalStatus.Connected">
            <summary>
            WAN adapter that is connected to a remote peer.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InterfaceOperationalStatus.Operational">
            <summary>
            Default status for LAN adapters.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.InterfaceStatus">
            <summary>
            The current status of a NetworkInterface
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InterfaceStatus.ResetStart">
            <summary>
            A reset condition has started
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InterfaceStatus.ResetEnd">
            <summary>
            A reset condition has ended
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InterfaceStatus.MediaConnect">
            <summary>
            The network media (e.g. cable) has been connected
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InterfaceStatus.MediaDisconnect">
            <summary>
            The network media (e.g. cable) has been disconnected
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InterfaceStatus.Bind">
            <summary>
            The interface has been bound by NDIS
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.InterfaceStatus.Unbind">
            <summary>
            The interface has been unbound by NDIS
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.INTFS_KEY_TABLE">
            <summary>
            List of interface names
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.INTF_ENTRY">
            <summary>
            Interface Entry for WZC
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_ENTRY.dwCtlFlags">
            <summary>
            control flags (see INTFCTL_* defines)
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_ENTRY.dwCapabilities">
            <summary>
            capabilities flags (see INTFCAP_* defines)
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_ENTRY.rdSSID">
            <summary>
            encapsulates the SSID raw binary
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_ENTRY.rdBSSID">
            <summary>
            encapsulates the BSSID raw binary
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_ENTRY.rdBSSIDList">
            <summary>
            encapsulates one WZC_802_11_CONFIG_LIST structure
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_ENTRY.rdStSSIDList">
            <summary>
            encapsulates one WZC_802_11_CONFIG_LIST structure
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_ENTRY.rdCtrlData">
            <summary>
            data for various control actions on the interface
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_ENTRY.bInitialized">
            <summary>
            To track caller that freeing the same structure more than one time..
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.INTF_ENTRY.GetEntry(System.String)">
            <summary>
            Creates a new entry with given name in memory 
            </summary>
            <param name="guid">Name</param>
            <returns>Entry</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.INTF_ENTRY.ToString">
            <summary>
            Overriden
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.INTF_ENTRY.SSID">
            <summary>
            SSID
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.INTF_ENTRY.Guid">
            <summary>
            Entry name
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.INTF_ENTRY.Description">
            <summary>
            Entry description
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_FLAGS.INTF_CM_MASK">
            <summary>
            mask for the configuration mode (NDIS_802_11_NETWORK_INFRASTRUCTURE value)
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_FLAGS.INTF_ENABLED">
            <summary>
            zero conf enabled for this interface
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_FLAGS.INTF_FALLBACK">
            <summary>
            attempt to connect to visible non-preferred networks also
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_FLAGS.INTF_OIDSSUPP">
            <summary>
            802.11 OIDs are supported by the driver/firmware (can't be set)
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_FLAGS.INTF_VOLATILE">
            <summary>
            the service parameters are volatile.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_FLAGS.INTF_POLICY">
            <summary>
            the service parameters are enforced by the policy.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.INTF_FLAGS.INTF_LDDEFWKEY">
            <summary>
            reload the default WEP_KEY
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IPAddressCollection">
            <summary>
            Stores a set of System.Net.IPAddress types.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPAddressCollection.Add(System.Net.IPAddress)">
            <summary>
            Throws a System.NotSupportedException because this operation is not supported
            for this collection.
            </summary>
            <param name="address">The object to be added to the collection.</param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPAddressCollection.Clear">
            <summary>
            Throws a System.NotSupportedException because this operation is not supported
            for this collection.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPAddressCollection.Contains(System.Net.IPAddress)">
            <summary>
            Checks whether the collection contains the specified OpenNETCF.Net.NetworkInformation.IPAddress
            object.
            </summary>
            <param name="address">
            The OpenNETCF.Net.NetworkInformation.IPAddressInformation object to be searched
            in the collection.
            </param>
            <returns>
            true if the OpenNETCF.Net.NetworkInformation.IPAddressInformation object exists
            in the collection; otherwise. false.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPAddressCollection.CopyTo(System.Net.IPAddress[],System.Int32)">
            <summary>
            Copies the collection to the specified array.
            </summary>
            <param name="array">A one-dimensional array that receives a copy of the collection.</param>
            <param name="offset">The zero-based index in array at which the copy begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">
            array is multidimensional.-or- offset is equal to or greater than the length
            of array.-or- The number of elements in this OpenNETCF.Net.NetworkInformation.IPAddress
            is greater than the available space from offset to the end of the destination
            array.
            </exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPAddressCollection.GetEnumerator">
            <summary>
            Returns an object that can be used to iterate through this collection.
            </summary>
            <returns>
            An object that implements the System.Collections.IEnumerator interface and
            provides access to the OpenNETCF.Net.NetworkInformation.IPAddressInformation
            types in this collection.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPAddressCollection.Remove(System.Net.IPAddress)">
            <summary>
            Throws a System.NotSupportedException because this operation is not supported
            for this collection.
            </summary>
            <param name="address">The object to be removed.</param>
            <returns>Always throws a System.NotSupportedException.</returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPAddressCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPAddressCollection.Count">
            <summary>
            Gets the number of OpenNETCF.Net.IPAddress types in this collection.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPAddressCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether access to this collection is read-only.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IPAddressInformation">
            <summary>
            Provides information about a network interface address.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPAddressInformation.#ctor">
            <summary>
            Initializes a new instance of the System.Net.NetworkInformation.IPAddressInformation
            class.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPAddressInformation.Address">
            <summary>
            Gets the Internet Protocol (IP) address.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPAddressInformation.IsDnsEligible">
            <summary>
            Gets a System.Boolean value that indicates whether the Internet Protocol
            (IP) address is legal to appear in a Domain Name System (DNS) server database.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPAddressInformation.IsTransient">
            <summary>
            Gets a System.Boolean value that indicates whether the Internet Protocol
            (IP) address is transient (a cluster address).
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IPAddressInformationCollection">
            <summary>
            Stores a set of System.Net.NetworkInformation.IPAddressInformation types.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPAddressInformationCollection.Add(OpenNETCF.Net.NetworkInformation.IPAddressInformation)">
            <summary>
            Throws a System.NotSupportedException because this operation is not supported
            for this collection.
            </summary>
            <param name="address">The object to be added to the collection.</param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPAddressInformationCollection.Clear">
            <summary>
            Throws a System.NotSupportedException because this operation is not supported
            for this collection.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPAddressInformationCollection.Contains(OpenNETCF.Net.NetworkInformation.IPAddressInformation)">
            <summary>
            Checks whether the collection contains the specified OpenNETCF.Net.NetworkInformation.IPAddressInformation
            object.
            </summary>
            <param name="address">
            The OpenNETCF.Net.NetworkInformation.IPAddressInformation object to be searched
            in the collection.
            </param>
            <returns>
            true if the OpenNETCF.Net.NetworkInformation.IPAddressInformation object exists
            in the collection; otherwise. false.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPAddressInformationCollection.CopyTo(OpenNETCF.Net.NetworkInformation.IPAddressInformation[],System.Int32)">
            <summary>
            Copies the collection to the specified array.
            </summary>
            <param name="array">A one-dimensional array that receives a copy of the collection.</param>
            <param name="offset">The zero-based index in array at which the copy begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">
            array is multidimensional.-or- offset is equal to or greater than the length
            of array.-or- The number of elements in this OpenNETCF.Net.NetworkInformation.IPAddressInformation
            is greater than the available space from offset to the end of the destination
            array.
            </exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPAddressInformationCollection.GetEnumerator">
            <summary>
            Returns an object that can be used to iterate through this collection.
            </summary>
            <returns>
            An object that implements the System.Collections.IEnumerator interface and
            provides access to the OpenNETCF.Net.NetworkInformation.IPAddressInformation
            types in this collection.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPAddressInformationCollection.Remove(OpenNETCF.Net.NetworkInformation.IPAddressInformation)">
            <summary>
            Throws a System.NotSupportedException because this operation is not supported
            for this collection.
            </summary>
            <param name="address">The object to be removed.</param>
            <returns>Always throws a System.NotSupportedException.</returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPAddressInformationCollection.Count">
            <summary>
            Gets the number of OpenNETCF.Net.NetworkInformation.IPAddressInformation types
            in this collection.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPAddressInformationCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether access to this collection is read-only.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPAddressInformationCollection.Item(System.Int32)">
            <summary>
            Gets the OpenNETCF.Net.NetworkInformation.IPAddressInformation at the specified
            index in the collection.
            </summary>
            <param name="index">The zero-based index of the element.</param>
            <returns>The OpenNETCF.Net.NetworkInformation.IPAddressInformation at the specified location.</returns>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IPForwardEntry">
            <summary>
            This class contains information that describes an IP network route.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPForwardEntry.Clone">
            <summary>
            Creates a copy of this IPForwardEntry
            </summary>
            <returns>A shallow copy of the current IPForwardEntry</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPForwardEntry.#ctor(OpenNETCF.Net.NetworkInformation.NetworkInterface)">
            <summary>
            Creates a new IPForwardEntry usable for the specified adapter
            </summary>
            <param name="adapter">Local NetworkInterface for which this entry will be used</param>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPForwardEntry.NetworkInterface">
            <summary>
            Gets the NetworkInterface that this entry is associated with
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPForwardEntry.Protocol">
            <summary>
            Gets the protocol that generated the route. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPForwardEntry.Destination">
            <summary>
            Gets or sets the IP address of the destination host. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPForwardEntry.SubnetMask">
            <summary>
            Gets or sets the Subnet mask of the destination host.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPForwardEntry.NextHop">
            <summary>
            Gets or sets the IP address of the next hop in the route. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPForwardEntry.RouteType">
            <summary>
            Gets or sets the route type as defined in RFC 1354.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPForwardEntry.Age">
            <summary>
            Gets the age of the route in seconds.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPForwardEntry.NextHopSystemNumber">
            <summary>
            Gets the autonomous system number of the next hop.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPForwardEntry.Policy">
            <summary>
            Gets the set of conditions that would cause the selection of a multi-path route. This member is typically in IP TOS format. For more information, see RFC 1354.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPForwardEntry.Metric">
            <summary>
            Gets or sets a routing-protocol-specific metric value. This metric value is documented in RFC 1354.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPForwardEntry.Metric2">
            <summary>
            Gets or sets a routing-protocol-specific metric value. This metric value is documented in RFC 1354.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPForwardEntry.Metric3">
            <summary>
            Gets or sets a routing-protocol-specific metric value. This metric value is documented in RFC 1354.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPForwardEntry.Metric4">
            <summary>
            Gets or sets a routing-protocol-specific metric value. This metric value is documented in RFC 1354.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPForwardEntry.Metric5">
            <summary>
            Gets or sets a routing-protocol-specific metric value. This metric value is documented in RFC 1354.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IPGlobalProperties">
            <summary>
            Provides information about the network connectivity of the local computer.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPGlobalProperties.GetIPv4GlobalStatistics">
            <summary>
            Provides Internet Protocol version 4 (IPv4) statistical data for the local
            computer.
            </summary>
            <returns>
            An OpenNETCF.Net.NetworkInformation.IPGlobalStatistics object that provides
            IPv4 traffic statistics for the local computer.
            </returns>
            <exception cref="N:OpenNETCF.Net.NetworkInformation">The call to the Win32 function GetIpStatistics failed.</exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPGlobalProperties.GetIPv6GlobalStatistics">
            <summary>
            Provides Internet Protocol version 6 (IPv6) statistical data for the local
             computer.
            </summary>
            <returns>
            An OpenNETCF.Net.NetworkInformation.IPGlobalStatistics object that provides
            IPv6 traffic statistics for the local computer.
            </returns>
            <exception cref="T:OpenNETCF.Net.NetworkInformation.NetworkInformationException">The call to the Win32 function GetIpStatistics failed.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The local computer is not running an operating system that supports IPv6.</exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties">
            <summary>
            Gets an object that provides information about the local computer's network
            connectivity and traffic statistics.
            </summary>
            <returns>
            A OpenNETCF.Net.NetworkInformation.IPGlobalProperties object that contains information
            about the local computer.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPGlobalProperties.SetTcpState(System.Net.IPAddress,System.Int32,System.Net.IPAddress,System.Int32,OpenNETCF.Net.NetworkInformation.TcpState)">
            <summary>
            Sets the state for a specified TCP connection
            </summary>
            <param name="localAddress">Local IP address for the connection</param>
            <param name="localPort">Local port for the connection</param>
            <param name="remoteAddress">Remote IP address for the connection</param>
            <param name="remotePort">Remote port for the connection</param>
            <param name="newState">New state for the connection</param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpConnections">
            <summary>
            Returns information about the Internet Protocol version 4 (IPV4) Transmission
            Control Protocol (TCP) connections on the local computer.
            </summary>
            <returns>
            An OpenNETCF.Net.NetworkInformation.TcpConnectionInformation array that contains
            objects that describe the active TCP connections, or an empty array if no
            active TCP connections are detected.
            </returns>
            <exception cref="T:OpenNETCF.Net.NetworkInformation.NetworkInformationException">
            The Win32 function GetTcpTable failed.
            </exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPGlobalProperties.GetActiveUdpListeners">
            <summary>
            Returns information about the Internet Protocol version 4 (IPv4) User Datagram
            Protocol (UDP) listeners on the local computer.
            </summary>
            <returns>
            An System.Net.IPEndPoint array that contains objects that describe the UDP
            listeners, or an empty array if no UDP listeners are detected.
            </returns>
            <exception cref="T:OpenNETCF.Net.NetworkInformation.NetworkInformationException">
            The call to the Win32 function GetUdpTable failed.
            </exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPGlobalProperties.GetIcmpV4Statistics">
            <summary>
            Provides Internet Control Message Protocol (ICMP) version 4 statistical data
            for the local computer.
            </summary>
            <returns>
            An OpenNETCF.Net.NetworkInformation.IcmpV4Statistics object that provides ICMP
            version 4 traffic statistics for the local computer.
            </returns>
            <exception cref="T:OpenNETCF.Net.NetworkInformation.NetworkInformationException">
            The Win32 function GetIcmpStatistics failed.
            </exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv4Statistics">
            <summary>
            Provides Transmission Control Protocol/Internet Protocol version 4 (TCP/IPv4)
            statistical data for the local computer.
            </summary>
            <returns>
            A OpenNETCF.Net.NetworkInformation.TcpStatistics object that provides TCP/IPv4
            traffic statistics for the local computer.
            </returns>
            <exception cref="T:OpenNETCF.Net.NetworkInformation.NetworkInformationException">
            The call to the Win32 function GetTcpStatistics failed.
            </exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv6Statistics">
            <summary>
            Provides Transmission Control Protocol/Internet Protocol version 6 (TCP/IPv6)
            statistical data for the local computer.
            </summary>
            <returns>
            A OpenNETCF.Net.NetworkInformation.TcpStatistics object that provides TCP/IPv6
            traffic statistics for the local computer.
            </returns>
            <exception cref="T:OpenNETCF.Net.NetworkInformation.NetworkInformationException">
            The call to the Win32 function GetTcpStatistics failed.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">The local computer is not running an operating system that supports IPv6.</exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv4Statistics">
            <summary>
            Provides User Datagram Protocol/Internet Protocol version 4 (UDP/IPv4) statistical
            data for the local computer.
            </summary>
            <returns>
            An OpenNETCF.Net.NetworkInformation.UdpStatistics object that provides UDP/IPv4
            traffic statistics for the local computer.
            </returns>
            <exception cref="T:OpenNETCF.Net.NetworkInformation.NetworkInformationException">The call to the Win32 function GetUdpStatistics failed.</exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv6Statistics">
            <summary>
            Provides User Datagram Protocol/Internet Protocol version 6 (UDP/IPv6) statistical
            data for the local computer.
            </summary>
            <returns>
            An OpenNETCF.Net.NetworkInformation.UdpStatistics object that provides UDP/IPv6
            traffic statistics for the local computer.
            </returns>
            <exception cref="T:OpenNETCF.Net.NetworkInformation.NetworkInformationException">The call to the Win32 function GetUdpStatistics failed.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The local computer is not running an operating system that supports IPv6.</exception>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalProperties.DhcpScopeName">
            <summary>
            Gets the Dynamic Host Configuration Protocol (DHCP) scope name.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalProperties.DomainName">
            <summary>
            Gets the domain in which the local computer is registered.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalProperties.HostName">
            <summary>
            Gets the host name for the local computer.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics">
            <summary>
            Provides Internet Protocol (IP) statistical data.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.#ctor(OpenNETCF.Net.NetworkInformation.MibIpStats)">
            <summary>
            Initializes a new instance of the System.Net.NetworkInformation.IPGlobalStatistics
            class.
            </summary>
            <param name="stats"></param>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.DefaultTtl">
            <summary>
            Sets or Gets the default time-to-live (TTL) value for Internet Protocol (IP) packets.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.ForwardingEnabled">
            <summary>
            Sets or Gets a System.Boolean value that specifies whether Internet Protocol (IP)
            packet forwarding is enabled.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.NumberOfInterfaces">
            <summary>
            Gets the number of network interfaces.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.NumberOfIPAddresses">
            <summary>
            Gets the number of Internet Protocol (IP) addresses assigned to the local
            computer.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.NumberOfRoutes">
            <summary>
            Gets the number of routes in the Internet Protocol (IP) routing table.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.OutputPacketRequests">
            <summary>
            Gets the number of outbound Internet Protocol (IP) packets.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.OutputPacketRoutingDiscards">
            <summary>
            Gets the number of routes that have been discarded from the routing table.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.OutputPacketsDiscarded">
            <summary>
            Gets the number of transmitted Internet Protocol (IP) packets that have been
            discarded.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.OutputPacketsWithNoRoute">
            <summary>
            Gets the number of Internet Protocol (IP) packets for which the local computer
            could not determine a route to the destination address.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.PacketFragmentFailures">
            <summary>
            Gets the number of Internet Protocol (IP) packets that could not be fragmented.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.PacketReassembliesRequired">
            <summary>
            Gets the number of Internet Protocol (IP) packets that required reassembly.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.PacketReassemblyFailures">
            <summary>
            Gets the number of Internet Protocol (IP) packets that were not successfully
            reassembled.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.PacketReassemblyTimeout">
            <summary>
            Gets the maximum amount of time within which all fragments of an Internet
            Protocol (IP) packet must arrive.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.PacketsFragmented">
            <summary>
            Gets the number of Internet Protocol (IP) packets fragmented.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.PacketsReassembled">
            <summary>
            Gets the number of Internet Protocol (IP) packets reassembled.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.ReceivedPackets">
            <summary>
            Gets the number of Internet Protocol (IP) packets received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsDelivered">
            <summary>
            Gets the number of Internet Protocol (IP) packets delivered.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsDiscarded">
            <summary>
            Gets the number of Internet Protocol (IP) packets that have been received
            and discarded.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsForwarded">
            <summary>
            Gets the number of Internet Protocol (IP) packets forwarded.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsWithAddressErrors">
            <summary>
            Gets the number of Internet Protocol (IP) packets with address errors that
            were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsWithHeadersErrors">
            <summary>
            Gets the number of Internet Protocol (IP) packets with header errors that
            were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsWithUnknownProtocol">
            <summary>
            Gets the number of Internet Protocol (IP) packets received on the local machine
            with an unknown protocol in the header.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IPInterfaceProperties">
            <summary>
            Provides information about network interfaces that support Internet Protocol version 4 (IPv4) or Internet Protocol version 6 (IPv6).
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties">
            <summary>
            Provides Internet Protocol version 4 (IPv4) configuration data for this network
            interface.
            </summary>
            <returns>
            An System.Net.NetworkInformation.IPv4InterfaceProperties object that contains
            IPv4 configuration data, or null if no data is available for the interface.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties">
            <summary>
            Provides Internet Protocol version 6 (IPv6) configuration data for this network
            interface.
            </summary>
            <returns>
            An System.Net.NetworkInformation.IPv6InterfaceProperties object that contains
            IPv6 configuration data.
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses">
            <summary>
            Gets the addresses of Dynamic Host Configuration Protocol (DHCP) servers
            for this interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses">
            <summary>
            Gets the addresses of Domain Name System (DNS) servers for this interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses">
            <summary>
            Gets the network gateway addresses for this interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled">
            <summary>
            Gets a System.Boolean value that indicates whether this interface is configured
            to send name resolution queries to a Domain Name System (DNS) server.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses">
            <summary>
            Gets the unicast addresses assigned to this interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses">
            <summary>
            Gets the anycast IP addresses assigned to this interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses">
            <summary>
            Gets the multicast addresses assigned to this interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses">
            <summary>
            Gets the addresses of Windows Internet Name Service (WINS) servers.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IPOptions">
            <summary>
            The ip_option_information structure describes the options to be
            included in the header of an IP packet. The TTL, TOS, and Flags
            values are carried in specific fields in the header. The OptionsData
            bytes are carried in the options area following the standard IP header.
            With the exception of source route options, this data must be in the
            format to be transmitted on the wire as specified in RFC 791. A source
            route option should contain the full route - first hop thru final
            destination - in the route data. The first hop will be pulled out of the
            data and the option will be reformatted accordingly. Otherwise, the route
            option should be formatted as specified in RFC 791.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPOptions.ttl">
            <summary>
            Time To Live.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPOptions.tos">
            <summary>
            Type Of Service.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPOptions.flags">
            <summary>
            IP header flags.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPOptions.optionsSize">
            <summary>
            Size in bytes of options data.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IPProtocol">
            <summary>
            Protocol
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.Local">
            <summary>
            Local
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.NetworkManagement">
            <summary>
            Network management
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.ICMP">
            <summary>
            Internet Control Message
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.EGP">
            <summary>
            Exterior Gateway
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.GGP">
            <summary>
            Gateway to Gateway
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.HELLO">
            <summary>
            Local Network
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.RIP">
            <summary>
            Routing Information
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.IS_IS">
            <summary>
            Intermediate System - Intermediate System
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.ES_IS">
            <summary>
            External System - Intermediate System
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.Cisco">
            <summary>
            Cisco
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.BBN">
            <summary>
            BBN
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.OSPF">
            <summary>
            OSPF
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.BGP">
            <summary>
            Border Gateway
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.NTAutoStatic">
            <summary>
            Autostatic under WINNT
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.NTStatic">
            <summary>
            Static under WINNT
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPProtocol.NTStaticNonDOD">
            <summary>
            Static Non-DoD
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IPRoutingTable">
            <summary>
            Encapsualtes the local device's IP routing table
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPRoutingTable.GetRoutingTable">
            <summary>
            Gets the local device's IP Routing Table
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPRoutingTable.Add(OpenNETCF.Net.NetworkInformation.IPForwardEntry)">
            <summary>
            This function creates a route in the local computer's IP routing table.
            </summary>
            <param name="item">IPForwardEntry to add to the table</param>
            <exception cref="T:OpenNETCF.Net.NetworkInformation.NetworkInformationException">
            The Win32 call to CreateIpForwardEntry failed
            </exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPRoutingTable.Refresh">
            <summary>
            repopulates the internal route table
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPRoutingTable.CopyTo(OpenNETCF.Net.NetworkInformation.IPForwardEntry[],System.Int32)">
            <summary>
            Copies the collection to the specified array.
            </summary>
            <param name="array">A one-dimensional array that receives a copy of the collection.</param>
            <param name="arrayIndex">The zero-based index in array at which the copy begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">
            array is multidimensional.-or- offset is equal to or greater than the length
            of array.-or- The number of elements in this OpenNETCF.Net.NetworkInformation.IPForwardEntry
            is greater than the available space from offset to the end of the destination
            array.
            </exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPRoutingTable.Remove(System.Net.IPAddress)">
            <summary>
            This function deletes an existing route in the local computer's IP routing table.
            </summary>
            <param name="destination">IPAddress of the destination to which the route should be deleted</param>
            <returns>true if removal was successful, otherwise false</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPRoutingTable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the routes in the table
            </summary>
            <returns>An IEnumerator</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPRoutingTable.GetRoundTripTime(System.Net.IPAddress)">
            <summary>
            Gets the round-trip time in milliseconds to the destination specified. 
            </summary>
            <param name="destination">IP adddress of the destination</param>
            <returns>Round-trip time in milliseconds</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPRoutingTable.GetHopCount(System.Net.IPAddress)">
            <summary>
            Gets the hop count to the destination specified. 
            </summary>
            <param name="destination">IP adddress of the destination</param>
            <returns>Number of hops to to destination</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPRoutingTable.GetBestInterface(System.Net.IPAddress)">
            <summary>
            This function retrieves the NetworkInterface that has the best route to the specified IP address.
            </summary>
            <param name="destination">IP Address of the destination</param>
            <returns>The local NetworkInterface that provides the best route</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPRoutingTable.Dispose">
            <summary>
            Releases resources for this instance
            </summary>
        </member>
        <member name="E:OpenNETCF.Net.NetworkInformation.IPRoutingTable.OnChange">
            <summary>
            Fired when the routing tbale changes
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPRoutingTable.Count">
            <summary>
            Gets the number of OpenNETCF.Net.NetworkInformation.IPForwardEntry types
            in this collection.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPRoutingTable.Item(System.Int32)">
            <summary>
            Gets an IPForwardEntry from the table based on its index
            </summary>
            <param name="index">The table position</param>
            <returns>An IPForwardEntry</returns>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IPStatus">
            <summary>
            Reports the status of sending an Internet Control Message Protocol (ICMP) echo message to a computer.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.Unknown">
            <summary>
            The ICMP echo request failed for an unknown reason.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.Success">
            <summary>
            The ICMP echo request succeeded; an ICMP echo reply was received. When you
            get this status code, the other System.Net.NetworkInformation.PingReply properties
            contain valid data.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.DestinationNetworkUnreachable">
            <summary>
            The ICMP echo request failed because the network that contains the destination
            computer is not reachable.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.DestinationHostUnreachable">
            <summary>
            The ICMP echo request failed because the destination computer is not reachable.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.DestinationProhibited">
            <summary>
            The ICMP echo request failed because contact with the destination computer
            is administratively prohibited.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.DestinationProtocolUnreachable">
            <summary>
            The ICMP echo request failed because the destination computer that is specified
            in an ICMP echo message is not reachable, because it does not support the
            packet's protocol.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.DestinationPortUnreachable">
            <summary>
            The ICMP echo request failed because the port on the destination computer
            is not available.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.NoResources">
            <summary>
            The ICMP echo request failed because of insufficient network resources.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.BadOption">
            <summary>
            The ICMP echo request failed because it contains an invalid option.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.HardwareError">
            <summary>
            The ICMP echo request failed because of a hardware error.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.PacketTooBig">
            <summary>
            The ICMP echo request failed because the packet containing the request is
            larger than the maximum transmission unit (MTU) of a node (router or gateway)
            located between the source and destination. The MTU defines the maximum size
            of a transmittable packet.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.TimedOut">
            <summary>
            The ICMP echo Reply was not received within the allotted time. The default
            time allowed for replies is 5 seconds. You can change this value using the
            Overload:System.Net.NetworkInformation.Ping.Send or Overload:System.Net.NetworkInformation.Ping.SendAsync
            methods that take a timeout parameter.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.BadRoute">
            <summary>
            The ICMP echo request failed because there is no valid route between the
            source and destination computers.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.TtlExpired">
            <summary>
            The ICMP echo request failed because its Time to Live (TTL) value reached
            zero, causing the forwarding node (router or gateway) to discard the packet.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.TtlReassemblyTimeExceeded">
            <summary>
            The ICMP echo request failed because the packet was divided into fragments
            for transmission and all of the fragments were not received within the time
            allotted for reassembly. RFC 2460 (available at www.ietf.org) specifies 60
            seconds as the time limit within which all packet fragments must be received.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.ParameterProblem">
            <summary>
            The ICMP echo request failed because a node (router or gateway) encountered
            problems while processing the packet header. This is the status if, for example,
            the header contains invalid field data or an unrecognized option.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.SourceQuench">
            <summary>
            The ICMP echo request failed because the packet was discarded. This occurs
            when the source computer's output queue has insufficient storage space, or
            when packets arrive at the destination too quickly to be processed.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.BadDestination">
            <summary>
            The ICMP echo request failed because the destination IP address cannot receive
            ICMP echo requests or should never appear in the destination address field
            of any IP datagram. For example, calling Overload:System.Net.NetworkInformation.Ping.Send
            and specifying IP address "000.0.0.0" returns this status.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.DestinationUnreachable">
            <summary>
            The ICMP echo request failed because the destination computer that is specified
            in an ICMP echo message is not reachable; the exact cause of problem is unknown.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.TimeExceeded">
            <summary>
            The ICMP echo request failed because its Time to Live (TTL) value reached
            zero, causing the forwarding node (router or gateway) to discard the packet.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.BadHeader">
            <summary>
            The ICMP echo request failed because the header is invalid.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.UnrecognizedNextHeader">
            <summary>
            The ICMP echo request failed because the Next Header field does not contain
            a recognized value. The Next Header field indicates the extension header
            type (if present) or the protocol above the IP layer, for example, TCP or
            UDP.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.IcmpError">
            <summary>
            The ICMP echo request failed because of an ICMP protocol error.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPStatus.DestinationScopeMismatch">
            <summary>
            The ICMP echo request failed because the source address and destination address
            that are specified in an ICMP echo message are not in the same scope. This
            is typically caused by a router forwarding a packet using an interface that
            is outside the scope of the source address. Address scopes (link-local, site-local,
            and global scope) determine where on the network an address is valid.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IPv4InterfaceProperties">
            <summary>
            Provides information about network interfaces that support Internet Protocol
            version 4 (IPv4).
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPv4InterfaceProperties.#ctor(OpenNETCF.Net.NetworkInformation.IPInterfaceProperties,System.Int32)">
            <summary>
            Initializes a new instance of the System.Net.NetworkInformation.IPv4InterfaceProperties
            class.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceProperties.Index">
            <summary>
            Gets the interface index for the Internet Protocol version 4 (IPv4) address.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive">
            <summary>
            Gets a System.Boolean value that indicates whether this interface has an
            automatic private IP addressing (APIPA) address.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled">
            <summary>
            Gets a System.Boolean value that indicates whether this interface has automatic
            private IP addressing (APIPA) enabled.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled">
            <summary>
            Gets or Sets a System.Boolean value that indicates whether the interface is configured
            to use a Dynamic Host Configuration Protocol (DHCP) server to obtain an IP
            address.
            </summary>
            <remarks>After Setting this property, you must Rebind the adapter for it to take effect</remarks>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceProperties.Mtu">
            <summary>
            Gets the maximum transmission unit (MTU) for this network interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins">
            <summary>
            Gets a System.Boolean value that indicates whether an interface uses Windows
            Internet Name Service (WINS).
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics">
            <summary>
            Provides statistical data for a network interface on the local computer.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics.Size">
            <summary>
            Length in bytes of a NetworkInterface class
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics.BytesReceived">
            <summary>
            Gets the number of bytes received on the interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics.BytesSent">
            <summary>
            Gets the number of bytes sent on the interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics.IncomingPacketsDiscarded">
            <summary>
            Gets the number of incoming packets discarded.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics.IncomingPacketsWithErrors">
            <summary>
            Gets the number of incoming packets with errors.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics.IncomingUnknownProtocolPackets">
            <summary>
            Gets the number of incoming packets with an unknown protocol.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics.NonUnicastPacketsReceived">
            <summary>
            Gets the number of non-unicast packets received on the interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics.NonUnicastPacketsSent">
            <summary>
            Gets the number of non-unicast packets sent on the interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics.OutgoingPacketsDiscarded">
            <summary>
            Gets the number of outgoing packets that were discarded.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics.OutgoingPacketsWithErrors">
            <summary>
            Gets the number of outgoing packets with errors.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics.OutputQueueLength">
            <summary>
            Gets the length of the output queue.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics.UnicastPacketsReceived">
            <summary>
            Gets the number of unicast packets received on the interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics.UnicastPacketsSent">
            <summary>
            Gets the number of unicast packets sent on the interface.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.IPv6InterfaceProperties">
            <summary>
            Provides information about network interfaces that support Internet Protocol
            version 6 (IPv6).
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.IPv6InterfaceProperties.#ctor(OpenNETCF.Net.NetworkInformation.IPInterfaceProperties,System.Int32)">
            <summary>
            Initializes a new instance of the System.Net.NetworkInformation.IPv6InterfaceProperties
            class.
            </summary>
            <param name="props"></param>
            <param name="mtu"></param>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv6InterfaceProperties.Index">
            <summary>
            Gets the interface index for the Internet Protocol version 6 (IPv6) address.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.IPv6InterfaceProperties.Mtu">
            <summary>
            Gets the maximum transmission unit (MTU) for this network interface.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.MibIfRow.Size">
            <summary>
            Length in bytes of a MibIfRow structure
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.MibIfRow.#ctor">
            <summary>
            Initializes a new instance of the System.Net.NetworkInformation.NetworkInterface class.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.Name">
            <summary>
            Gets the name of the network adapter.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.Index">
            <summary>
            Specifies the index that identifies the interface
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.NetworkInterfaceType">
            <summary>
            Specifies the type of interface
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.MTU">
            <summary>
            Specifies the Maximum Transmission Unit (MTU).
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.Speed">
            <summary>
            Specifies the speed of the interface in bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.PhysAddrLength">
            <summary>
            Specifies the length of the physical address specified by the bPhysAddr member. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.OperationalStatus">
            <summary>
            Specifies if the interface is administratively enabled or disabled. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.InterfaceOperationalStatus">
            <summary>
            Specifies the operational status of the interface
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.LastChange">
            <summary>
            Specifies the length of time, in centaseconds (10^-2 sec), that elapsed between January 1, 1601, and the last change of the operational status of the interface (connection). The value rolls over after 2^32 centaseconds
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.OctetsReceived">
            <summary>
            Specifies the number of octets of data received through this interface
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.UnicastPacketsReceived">
            <summary>
            Specifies the number of unicast packets received through this interface
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.NonUnicastPacketsReceived">
            <summary>
            Specifies the number of non-unicast packets received through this interface. Broadcast and multicast packets are included.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.DiscardedIncomingPackets">
            <summary>
            Specifies the number of incoming packets that were discarded even though they did not have errors. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.ErrorIncomingPackets">
            <summary>
            Specifies the number of incoming packets that were discarded because of errors.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.UnknownIncomingPackets">
            <summary>
            Specifies the number of incoming packets that were discarded because the protocol was unknown
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.OctetsSent">
            <summary>
            Specifies the number of octets of data sent through this interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.UnicastPacketsSent">
            <summary>
            Specifies the number of unicast packets sent through this interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.NonUnicastPacketsSent">
            <summary>
            Specifies the number of non-unicast packets sent through this interface. Broadcast and multicast packets are included.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.DiscardedOutgoingPackets">
            <summary>
            Specifies the number of outgoing packets that were discarded even though they did not have errors. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.ErrorOutgoingPackets">
            <summary>
            Specifies the number of outgoing packets that were discarded because of errors.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.OutputQueueLength">
            <summary>
            Specifies the output queue length
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.DescLength">
            <summary>
            Specifies the length of the physical address specified by the bPhysAddr member. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MibIfRow.Description">
            <summary>
            Gets a System.String that describes this interface.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformation">
            <summary>
            Provides information about a network interface's multicast address.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformation.#ctor">
            <summary>
            Initializes a new instance of the OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformation
            class.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformationCollection">
            <summary>
            Stores a set of OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformation
            types.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformationCollection.#ctor">
            <summary>
            Initializes a new instance of the OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformationCollection
            class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformationCollection.Add(OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformation)">
            <summary>
            Throws a System.NotSupportedException because this operation is not supported
            for this collection.
            </summary>
            <param name="address">The object to be added to the collection.</param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformationCollection.Clear">
            <summary>
            Throws a System.NotSupportedException because this operation is not supported
            for this collection.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformationCollection.Contains(OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformation)">
            <summary>
            Checks whether the collection contains the specified System.Net.NetworkInformation.MulticastIPAddressInformation
            object.
            </summary>
            <param name="address">
            The System.Net.NetworkInformation.MulticastIPAddressInformation object to be
            searched in the collection.
            </param>
            <returns>
            true if the System.Net.NetworkInformation.MulticastIPAddressInformation object
            exists in the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformationCollection.CopyTo(OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformation[],System.Int32)">
            <summary>
            Copies the collection to the specified array.
            </summary>
            <param name="array">A one-dimensional array that receives a copy of the collection.</param>
            <param name="offset">The zero-based index in array at which the copy begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">
            array is multidimensional.-or- offset is equal to or greater than the length
            of array.-or- The number of elements in this OpenNETCF.Net.NetworkInformation.IPAddressInformation
            is greater than the available space from offset to the end of the destination
            array.
            </exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformationCollection.GetEnumerator">
            <summary>
            Returns an object that can be used to iterate through this collection.
            </summary>
            <returns>
            An object that implements the System.Collections.IEnumerator interface and
            provides access to the OpenNETCF.Net.NetworkInformation.IPAddressInformation
            types in this collection.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformationCollection.Remove(OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformation)">
            <summary>
            Throws a System.NotSupportedException because this operation is not supported
            for this collection.
            </summary>
            <param name="address">The object to be removed.</param>
            <returns>Always throws a System.NotSupportedException.</returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformationCollection.Count">
            <summary>
            Gets the number of OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformation
            types in this collection.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformationCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether access to this collection is read-only.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformationCollection.Item(System.Int32)">
            <summary>
            Gets the OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformation instance
            at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the element.</param>
            <returns>
            The OpenNETCF.Net.NetworkInformation.MulticastIPAddressInformation at the specified
            location.
            </returns>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.NDIS_802_11_BSSID_LIST">
            <summary>
            This class represents the data returned by the 
            OID_802_11_BSSID_LIST query to an RF Ethernet adapter.
            It is just used during parsing of the returned data
            and really should not persist.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.NDIS_802_11_CONFIGURATION_FH.DwellTime">
            <summary>
            Amount of time dwelling in each frequency (in kusec).
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.NetworkInformationException">
            <summary>
            The exception that is thrown when an error occurs while retrieving network
            information.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInformationException.#ctor">
            <summary>
            Initializes a new instance of the System.Net.NetworkInformation.NetworkInformationException
            class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInformationException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the System.Net.NetworkInformation.NetworkInformationException
            class with the specified error code.
            </summary>
            <param name="error">A Win32 error code.</param>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.NetworkInformationException.ErrorCode">
            <summary>
            Gets the Win32 error code for this exception. 
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.NetworkInterface">
            <summary>
            Provides configuration and statistical information for a network interface.
            </summary>
            <summary>
            Provides configuration and statistical information for a network interface.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterface.#ctor(System.Int32,System.String)">
            <summary>
            Creates a NetworkInterface instance
            </summary>
            <param name="index"></param>
            <param name="interfaceName"></param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress">
            <summary>
            Returns the Media Access Control (MAC) address for this adapter.
            </summary>
            <returns>
            A System.Net.NetworkInformation.PhysicalAddress object that contains the
            physical address.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterface.ToString">
            <summary>
            Returns the NetworkInterface's Name or Description field
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterface.Refresh">
            <summary>
            Refreshes all statistics for the current NetworkInterface
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterface.Bind">
            <summary>
            Method called on unbound adapter (maybe when handling
            changing *both* the IP/subnet/gateway *and* the wireless
            settings).  This method notifies NDIS to bind the 
            adapter to all protocols indicated in the registry, in 
            effect causing the current registry settings to be 
            applied rather than those which the adapter is currently
            using.  Since we are binding, not *re*-binding the
            protocols, we are implying that the adapter is not
            currently bound to anything.  When making this call,
            we must refresh any adapter list that we might have,
            to retrieve the current state of all adapters.  
            Changes to things like the IP address, subnet mask, 
            etc. are not immediately returned.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterface.Unbind">
            <summary>
            Method called to unbind a given adapter.  You might
            perform this operation before attempting to change
            *both* the protocol configuration of an adapter (IP,
            subnet, gateway), *and* the wireless configuration of
            the same adapter (WEP, SSID, etc.)  To do that, first
            unbind the adapter, then change the settings, then
            bind the adapter (UnbindAdapter(), make changes,
            BindAdapter()).  Once you have bound/unbound an 
            adapter, to get its new configuration, you must 
            regenerate the list of adapters.  Changes to things
            like the IP address, subnet mask, etc. are not 
            immediately returned.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterface.Rebind">
            <summary>
            Method called after making some changes to the current
            IP address, subnet mask, etc.  This method notifies NDIS
            to rebind the adapter to all protocols, in effect causing
            the current registry settings to be applied rather than
            those which the current configuration represents.  Once you
            have rebound an adapter, to get its new configuration, you
            must regenerate the list of adapters.  Changes to things
            like the IP address, subnet mask, etc. are not immediately 
            returned.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterface.GetIPProperties">
            <summary>
            Returns an object that describes the configuration of this network interface.
            </summary>
            <returns>
            An System.Net.NetworkInformation.IPInterfaceProperties object that describes
            this network interface.
            </returns>
            <remarks>Note that the information in the object returned by this method reflects the interfaces as of the time the array is created. This information is not updated dynamically.</remarks>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterface.GetIPv4Statistics">
            <summary>
            Gets the IPv4 statistics.
            </summary>
            <returns>An OpenNETCF.Net.NetworkInformation.IPv4InterfaceStatistics object.</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterface.DhcpRelease">
            <summary>
            Releases the Adapter's DHCP lease
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterface.DhcpRenew">
            <summary>
            Renews the Adapter's DHCP lease
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces">
            <summary>
            Returns objects that describe the network interfaces on the local computer.
            </summary>
            <returns>
            A System.Net.NetworkInformation.NetworkInterface array that contains objects
            that describe the available network interfaces, or an empty array if no interfaces
            are detected.
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.NetworkInterface.Name">
            <summary>
            Gets the name of the network adapter.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.NetworkInterface.Description">
            <summary>
            Gets a System.String that describes this interface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.NetworkInterface.Id">
            <summary>
            Gets the identifier of the network adapter.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType">
            <summary>
            Specifies the type of interface
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.NetworkInterface.CurrentIpAddress">
            <summary>
            The currently active IP address of the adapter.
            </summary>
            <remarks>After Setting this property, you must Rebind the adapter for it to take effect</remarks>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.NetworkInterface.CurrentSubnetMask">
            <summary>
            The currently active subnet mask address of the 
            adapter.
            </summary>
            <remarks>After Setting this property, you must Rebind the adapter for it to take effect</remarks>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.NetworkInterface.OperationalStatus">
            <summary>
            Specifies if the interface is administratively enabled or disabled. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.NetworkInterface.InterfaceOperationalStatus">
            <summary>
            Specifies the operational status of the interface
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.NetworkInterface.Speed">
            <summary>
            Specifies the speed of the interface in bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.NetworkInterface.DhcpLeaseExpires">
            <summary>
            The date/time at which the IP address lease from
            the DHCP server will expire (at which time the
            adapter will have to contact the server to renew
            the lease or stop using the IP address).
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.NetworkInterface.DhcpLeaseObtained">
            <summary>
            The date/time at which the IP address lease was
            obtained from the DHCP server.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex">
            <summary>
            Gets the index of the loopback interface.  A return of -1 indicates that no loopback interface exists
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType">
            <summary>
            Specifies types of network interfaces.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.AsymmetricDsl">
            <summary>
            The network interface uses an Asymmetric Digital Subscriber Line (ADSL). 
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.Atm">
            <summary>
            The network interface uses asynchronous transfer mode (ATM) for data transmission
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.BasicIsdn">
            <summary>
            The network interface uses a basic rate interface Integrated Services Digital Network (ISDN) connection. ISDN is a set of standards for data transmission over telephone lines
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.Ethernet">
            <summary>
            The network interface uses an Ethernet connection. Ethernet is defined in IEEE standard 802.3
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.Ethernet3MegaBit">
            <summary>
            #Mb Ethernet
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.FastEthernetFx">
            <summary>
            The network interface uses a Fast Ethernet connection over optical fiber. This type of connection is also known as 100BaseFX
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.FastEthernetT">
            <summary>
            The network interface uses a Fast Ethernet connection. Fast Ethernet provides a data rate of 100 megabits per second, known as 100BaseT
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.Fddi">
            <summary>
            The network interface uses a Fiber Distributed Data Interface (FDDI) connection. FDDI is a set of standards for data transmission on fiber optic lines in a local area network
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.GenericModem">
            <summary>
            The network interface uses a modem
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.GigaBitEthernet">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.HighPerformanceSerialBus">
            <summary>
            The network interface uses a High Performance Serial Bus
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.IPOverAtm">
            <summary>
            The network interface uses Internet Protocol (IP) in combination with asynchronous transfer mode (ATM) for data transmission
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.Isdn">
            <summary>
            The network interface uses a connection configured for ISDN and the X.25 protocol. X.25 allows computers on public networks to communicate using an intermediary computer
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.Loopback">
            <summary>
            The network interface is a loopback adapter. Such interfaces are used primarily for testing; no traffic is sent
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.MultiRateSymmetricDsl">
            <summary>
            The network interface uses a Multirate Digital Subscriber Line
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.Ppp">
            <summary>
            The network interface uses a Point-To-Point protocol (PPP) connection. PPP is a protocol for data transmission using a serial device
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.PrimaryIsdn">
            <summary>
            The network interface uses a primary rate interface Integrated Services Digital Network (ISDN) connection. ISDN is a set of standards for data transmission over telephone lines
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.RateAdaptDsl">
            <summary>
            The network interface uses a Rate Adaptive Digital Subscriber Line (ADSL). 
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.Slip">
            <summary>
            The network interface uses a Serial Line Internet Protocol (SLIP) connection. SLIP is defined in IETF RFC 1055
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.SymmetricDsl">
            <summary>
            The network interface uses a Symmetric Digital Subscriber Line (SDSL). 
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.TokenRing">
            <summary>
            The network interface uses a Token-Ring connection. Token-Ring is defined in IEEE standard 802.5
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.Tunnel">
            <summary>
            The network interface uses a tunnel connection
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.Unknown">
            <summary>
            The interface type is not known
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.VeryHighSpeedDsl">
            <summary>
            The network interface uses a Very High Data Rate Digital Subscriber Line (VDSL). 
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkInterfaceType.Wireless80211">
            <summary>
            The network interface uses a wireless LAN connection (IEEE 802.11 standard). 
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.InterfaceEventDelegate">
            <summary>
            Delegate for the loss or gain of a NetworkInterface
            </summary>
            <param name="interfaceName">The name of the interface lost or gained</param>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.InterfaceStatusDelegate">
            <summary>
            Delegate for a status change in a NetworkInterface
            </summary>
            <param name="interfaceName">The name of the interface lost or gained</param>
            <param name="newStatus">The new status of the interface</param>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.NetworkInterfaceWatcher">
            <summary>
            This class alows an application to monitor the status of all NetworkInterfaces on the local device
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterfaceWatcher.#ctor">
            <summary>
            Creates an instance of a NetworkInterfaceWatcher
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterfaceWatcher.Finalize">
            <summary>
            Finalizes a NetworkInterfaceWatcher
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.NetworkInterfaceWatcher.Dispose">
            <summary>
            Disposed a NetworkInterfaceWatcher
            </summary>
        </member>
        <member name="E:OpenNETCF.Net.NetworkInformation.NetworkInterfaceWatcher.InterfaceLost">
            <summary>
            Fired when a NetworkInterface is removed from the system
            </summary>
            <remarks>
            This event is interface index based. Some interfaces (e.g. PPP) get a new index when 
            reconnected so this event may fire when a cable connection state changes or when the 
            device sleeps or wakes.
            </remarks>
        </member>
        <member name="E:OpenNETCF.Net.NetworkInformation.NetworkInterfaceWatcher.InterfaceGained">
            <summary>
            Fired when a NetworkInterface is added to the system
            </summary>
            <remarks>
            This event is interface index based. Some interfaces (e.g. PPP) get a new index when 
            reconnected so this event may fire when a cable connection state changes or when the 
            device sleeps or wakes.
            </remarks>
        </member>
        <member name="E:OpenNETCF.Net.NetworkInformation.NetworkInterfaceWatcher.InterfaceStatusChange">
            <summary>
            Fired when the status of a NetworkInterface changes
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.NetworkType">
            <summary>
            Enumeration returned in the NetworkTypeInUse property.
            Indicates the general type of radio network in use.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkType.FH">
            <summary>
            Indicates the physical layer of the frequency hopping spread-spectrum radio
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkType.DS">
            <summary>
            Indicates the physical layer of the direct sequencing spread-spectrum radio
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkType.OFDM5">
            <summary>
            Indicates the physical layer for 5-GHz Orthagonal Frequency Division Multiplexing radios
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.NetworkType.OFDM24">
            <summary>
            Indicates the physical layer for 24-GHz Orthagonal Frequency Division Multiplexing radios
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.OperationalStatus">
            <summary>
            Specifies the operational state of a network interface.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.OperationalStatus.Dormant">
            <summary>
            The network interface is not in a condition to transmit data packets; it is waiting for an external event.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.OperationalStatus.Down">
            <summary>
            The network interface is unable to transmit data packets.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.OperationalStatus.LowerLayerDown">
            <summary>
            The network interface is unable to transmit data packets because it runs on top of one or more other interfaces, and at least one of these "lower layer" interfaces is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.OperationalStatus.NotPresent">
            <summary>
            The network interface is unable to transmit data packets because of a missing component, typically a hardware component.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.OperationalStatus.Testing">
            <summary>
            The network interface is running tests.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.OperationalStatus.Unknown">
            <summary>
            The network interface status is not known.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.OperationalStatus.Up">
            <summary>
            The network interface is up; it can transmit data packets.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.PhysicalAddress">
            <summary>
            Provides the Media Access Control (MAC) address for a network interface (adapter).
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.PhysicalAddress.None">
            <summary>
            Returns a new System.Net.NetworkInformation.PhysicalAddress instance with
            a zero length address. This field is read-only.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the System.Net.NetworkInformation.PhysicalAddress
            class.
            </summary>
            <param name="address">
            A System.Byte array containing the address.
            </param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)">
            <summary>
            Compares two System.Net.NetworkInformation.PhysicalAddress instances.
            </summary>
            <param name="comparand">
            The System.Net.NetworkInformation.PhysicalAddress to compare to the current
            instance.
            </param>
            <returns>
            true if this instance and the specified instance contain the same address;
            otherwise false.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.PhysicalAddress.GetAddressBytes">
            <summary>
            Returns the address of the current instance.
            </summary>
            <returns>A System.Byte array containing the address.</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.PhysicalAddress.GetHashCode">
            <summary>
            Returns the hash value of a physical address.
            </summary>
            <returns>An integer hash value.</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.PhysicalAddress.ToString">
            <summary>
            Returns the System.String representation of the address of this instance.
            </summary>
            <returns>
            A System.String containing the address contained in this instance.
            </returns>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.Ping">
            <summary>
            Allows an application to determine whether a remote computer is accessible over the network.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.Ping.#ctor">
            <summary>
            Initializes a new instance of the Ping class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.Ping.Send(System.String)">
            <summary>
            Attempts to send an Internet Control Message Protocol (<c>ICMP</c>) echo message.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.Ping.Send(System.String,System.Int32)">
            <summary>
            Attempts to send an Internet Control Message Protocol (<c>ICMP</c>) echo message.
            </summary>
            <param name="hostNameOrAddress"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.Ping.Send(System.String,System.Byte[],System.Int32,OpenNETCF.Net.NetworkInformation.PingOptions)">
            <summary>
            Attempts to send an Internet Control Message Protocol (<c>ICMP</c>) echo message.
            </summary>
            <param name="hostNameOrAddress"></param>
            <param name="buffer"></param>
            <param name="timeout"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Byte[],System.Int32,OpenNETCF.Net.NetworkInformation.PingOptions)">
            <summary>
            Attempts to send an Internet Control Message Protocol (<c>ICMP</c>) echo message.
            </summary>
            <param name="address"></param>
            <param name="buffer"></param>
            <param name="timeout"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.Ping.Dispose(System.Boolean)">
            <summary>
            Disposes internally allocated resources
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.Ping.Finalize">
            <summary>
            Finalizes the Ping instance
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.PingException">
            <summary>
            The exception that is thrown when a Send method calls a method that throws an exception.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.PingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PingException class using the specified message.
            </summary>
            <param name="message">A String that describes the error.</param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.PingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the PingException class using the specified message and inner exception.
            </summary>
            <param name="message">A String that describes the error.</param>
            <param name="innerException">The exception that causes the current exception.</param>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.PingOptions">
            <summary>
            Used to control how Ping data packets are transmitted.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.PingOptions.#ctor">
            <summary>
            Initializes a new instance of the PingOptions class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the PingOptions class and sets the Time to Live and fragmentation values.
            </summary>
            <param name="ttl">Specifies the number of times the Ping data packets can be forwarded.</param>
            <param name="dontFragment">True to prevent data sent to the remote host from being fragmented; otherwise, false.</param>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.PingOptions.Ttl">
            <summary>
            Gets or sets the number of routing nodes that can forward the Ping data before it is discarded.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.PingOptions.DontFragment">
            <summary>
            Gets or sets a Boolean value that controls fragmentation of the data sent to the remote host.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.PingReply">
            <summary>
            Provides information about the status and data resulting from a Send operation.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.PingReply.Options">
            <summary>
            Gets the options used to transmit the reply to an Internet Control Message Protocol (ICMP) echo request.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.PingReply.Address">
            <summary>
            Gets the address of the host that sends the Internet Control Message Protocol (ICMP) echo reply.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.PingReply.Buffer">
            <summary>
            Gets the buffer of data received in an Internet Control Message Protocol (ICMP) echo reply message.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.PingReply.RoundTripTime">
            <summary>
            Gets the number of milliseconds taken to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.PingReply.Status">
            <summary>
            Gets the status of an attempt to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.PrefixOrigin">
            <summary>
            Specifies how an IP address network prefix was located.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.PrefixOrigin.Other">
            <summary>
            The prefix was located using an unspecified source.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.PrefixOrigin.Manual">
            <summary>
            The prefix was manually configured.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.PrefixOrigin.WellKnown">
            <summary>
            The prefix is a well-known prefix. Well-known prefixes are specified in standard-track
            Request for Comments (RFC) documents and assigned by the Internet Assigned
            Numbers Authority (IANA) or an address registry. Such prefixes are reserved
            for special purposes.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.PrefixOrigin.Dhcp">
            <summary>
            The prefix was supplied by a Dynamic Host Configuration Protocol (DHCP) server.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.PrefixOrigin.RouterAdvertisement">
            <summary>
            The prefix was supplied by a router advertisement.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.RadioConfiguration">
            <summary>
            Describes configuration parameters for an 802.11 radio
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.RadioConfiguration.BeaconPeriod">
            <summary>
            Specifies the interval between beacon message transmissions. This value is specified in Kµsec (1024 µsec). 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.RadioConfiguration.ATIMWindow">
            <summary>
            Specifies the announcement traffic information message (ATIM) window in Kµsec (1024 µsec). The ATIM window is a short time period immediately after the transmission of each beacon in an IBSS configuration. During the ATIM window, any station can indicate the need to transfer data to another station during the following data-transmission window. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.RadioConfiguration.Frequency">
            <summary>
            Specifies the frequency of the selected channel in kHz. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.RadioConfiguration.FrequencyHopPattern">
            <summary>
            Specifies the hop pattern used to determine the hop sequence. As defined by the 802.11 standard, the layer management entity (LME) of the physical layer uses a hop pattern to determine the hop sequence. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.RadioConfiguration.FrequencyHopSet">
            <summary>
            Specifies a set of patterns. The LME of the physical layer uses these patterns to determine the hop sequence
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.RadioConfiguration.FrequencyHopDwellTime">
            <summary>
            Specifies the maximum period of time during which the transmitter should remain fixed on a channel. This interval is described in Kµsec (1024 µsec).
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.RAW_DATA">
            <summary>
            Encapsulates generic data blob
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.RouteType">
            <summary>
            Specifies a route type as defined in RFC 1354.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.RouteType.Intermediate">
            <summary>
            The next hop is not the final destination (remote route).
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.RouteType.Final">
            <summary>
            The next hop is the final destination (local route). 
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.RouteType.Invalid">
            <summary>
            The route is invalid. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.RouteType.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.SignalStrength">
            <summary>
            The SignalStrength class provides a repository for the
            signal strength indication from an RF Ethernet network
            adapter.  From an instance of this class, you can get
            the signal strength in dB, an enumerated value of 
            type StrengthType indicating the relative strength, or
            a string representing the relative strength.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.SignalStrength.DBToStrength(System.Int32)">
            <summary>
            The DBToStrength static conversion function can
            be used to take a dB strength value previously
            retrieved and generate a StrengthType enumeration
            value based on the relative strength.
            </summary>
            <param name="db">
            Signal strength in dB
            </param>
            <returns>
            StrengthType indicating strength that db parameter represents
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.SignalStrength.DBToString(System.Int32)">
            <summary>
            The DBToString static conversion function allows a
            signal strength value in dB previously retrieved
            to be converted into the string representation of
            its relative signal strength.
            </summary>
            <param name="db">
            Signal strength in dB.
            </param>
            <returns>
            String: "No Signal", "Very Low", "Low", "Good", 
            "Very Good", "Excellent", or 
            "Not a wireless adapter". 
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.SignalStrength.StrengthToString(OpenNETCF.Net.NetworkInformation.StrengthType)">
            <summary>
            The StrengthToString static conversion function
            allows a previously stored signal strength 
            enumeration value to be converted into its string
            representation.
            </summary>
            <param name="st">
            One of the SignalStrength enumeration values.
            </param>
            <returns>
            String: "No Signal", "Very Low", "Low", "Good", 
            "Very Good", "Excellent", or 
            "Not a wireless adapter". 
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.SignalStrength.ToString">
            <summary>
            Converts strength to string representing relative
            strength ("Good", "Low", etc.)
            </summary>
            <returns>
            String: "No Signal", "Very Low", "Low", "Good", 
            "Very Good", "Excellent", or 
            "Not a wireless adapter". 
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.SignalStrength.Decibels">
            <summary>
            The Decibels property returns the signal strength
            in dB.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.SignalStrength.Strength">
            <summary>
            Strength of signal as enumerated type.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.StrengthType">
            <summary>
            The StrengthType enumeration provides a list of 
            relative RF Ethernet signal strength values that 
            correspond to the strengths displayed by Windows CE
            itself.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.StrengthType.NotAWirelessAdapter">
            <summary>
            The adapter for which signal strength was requested is not
            a wireless network adapter or does not report its signal
            strength in the standard way
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.StrengthType.NoSignal">
            <summary>
            The adapter is not receiving a network signal
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.StrengthType.VeryLow">
            <summary>
            The network signal has very low strength
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.StrengthType.Low">
            <summary>
            The network signal has low strength
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.StrengthType.Good">
            <summary>
            The network signal is good
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.StrengthType.VeryGood">
            <summary>
            The network signal is very good
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.StrengthType.Excellent">
            <summary>
            The network signal is excellent
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.SuffixOrigin">
            <summary>
            Specifies how an IP address host suffix was located.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.SuffixOrigin.Other">
            <summary>
            The suffix was located using an unspecified source.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.SuffixOrigin.Manual">
            <summary>
            The suffix was manually configured.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.SuffixOrigin.WellKnown">
            <summary>
            The suffix is a well-known suffix. Well-known suffixes are specified in standard-track
            Request for Comments (RFC) documents and assigned by the Internet Assigned
            Numbers Authority (IANA) or an address registry. Such suffixes are reserved
            for special purposes.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.SuffixOrigin.OriginDhcp">
            <summary>
            The suffix was supplied by a Dynamic Host Configuration Protocol (DHCP) server.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.SuffixOrigin.LinkLayerAddress">
            <summary>
            The suffix is a link-local suffix.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.SuffixOrigin.Random">
            <summary>
            The suffix was randomly assigned.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.TcpConnectionInformation">
            <summary>
            Provides information about the Transmission Control Protocol (TCP) connections
            on the local computer.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.TcpConnectionInformation.op_Implicit(OpenNETCF.Net.NetworkInformation.TcpConnectionInformation)~System.Byte[]">
            <summary>
            Returns a byte array representing a native MIB_TCPROW structure for a TcpConnectionInformation instance
            </summary>
            <param name="t">A TcpConnectionInformation instance</param>
            <returns>A byte array</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.TcpConnectionInformation.#ctor">
            <summary>
            Initializes a new instance of the System.Net.NetworkInformation.TcpConnectionInformation
            class.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpConnectionInformation.LocalEndPoint">
            <summary>
            Gets the local endpoint of a Transmission Control Protocol (TCP) connection.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpConnectionInformation.RemoteEndPoint">
            <summary>
            Gets the remote endpoint of a Transmission Control Protocol (TCP) connection.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpConnectionInformation.State">
            <summary>
            Gets the state of this Transmission Control Protocol (TCP) connection.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.TcpState">
            <summary>
            Specifies the states of a Transmission Control Protocol (TCP) connection.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.TcpState.Unknown">
            <summary>
            The TCP connection state is unknown.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.TcpState.Closed">
            <summary>
            The TCP connection is closed.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.TcpState.Listen">
            <summary>
            The local endpoint of the TCP connection is listening for a connection request
            from any remote endpoint.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.TcpState.SynSent">
            <summary>
            The local endpoint of the TCP connection has sent the remote endpoint a segment
            header with the synchronize (SYN) control bit set and is waiting for a matching
            connection request.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.TcpState.SynReceived">
            <summary>
            The local endpoint of the TCP connection has sent and received a connection
            request and is waiting for an acknowledgment.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.TcpState.Established">
            <summary>
            The TCP handshake is complete. The connection has been established and data
            can be sent.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.TcpState.FinWait1">
            <summary>
            The local endpoint of the TCP connection is waiting for a connection termination
            request from the remote endpoint or for an acknowledgement of the connection
            termination request sent previously.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.TcpState.FinWait2">
            <summary>
            The local endpoint of the TCP connection is waiting for a connection termination
            request from the remote endpoint.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.TcpState.CloseWait">
            <summary>
            The local endpoint of the TCP connection is waiting for a connection termination
            request from the local user.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.TcpState.Closing">
            <summary>
            The local endpoint of the TCP connection is waiting for an acknowledgement
            of the connection termination request sent previously.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.TcpState.LastAck">
            <summary>
            The local endpoint of the TCP connection is waiting for the final acknowledgement
            of the connection termination request sent previously.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.TcpState.TimeWait">
            <summary>
            The local endpoint of the TCP connection is waiting for enough time to pass
            to ensure that the remote endpoint received the acknowledgement of its connection
            termination request.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.TcpState.DeleteTcb">
            <summary>
            The transmission control buffer (TCB) for the TCP connection is being deleted.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.TcpStatistics">
            <summary>
            Provides Transmission Control Protocol (TCP) statistical data.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.TcpStatistics.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the System.Net.NetworkInformation.TcpStatistics
            class.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpStatistics.ConnectionsAccepted">
            <summary>
            Gets the number of accepted Transmission Control Protocol (TCP) connection
            requests.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpStatistics.ConnectionsInitiated">
            <summary>
            Gets the number of Transmission Control Protocol (TCP) connection requests
            made by clients.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpStatistics.CumulativeConnections">
            <summary>
            Specifies the total number of Transmission Control Protocol (TCP) connections
            established.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpStatistics.CurrentConnections">
            <summary>
            Gets the number of current Transmission Control Protocol (TCP) connections.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpStatistics.ErrorsReceived">
            <summary>
            Gets the number of Transmission Control Protocol (TCP) errors received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpStatistics.FailedConnectionAttempts">
            <summary>
            Gets the number of failed Transmission Control Protocol (TCP) connection
            attempts.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpStatistics.MaximumConnections">
            <summary>
            Gets the maximum number of supported Transmission Control Protocol (TCP)
            connections.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpStatistics.MaximumTransmissionTimeout">
            <summary>
            Gets the maximum retransmission time-out value for Transmission Control Protocol
            (TCP) segments.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpStatistics.MinimumTransmissionTimeout">
            <summary>
            Gets the minimum retransmission time-out value for Transmission Control Protocol
            (TCP) segments.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpStatistics.ResetConnections">
            <summary>
            Gets the number of RST packets received by Transmission Control Protocol
            (TCP) connections.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpStatistics.ResetsSent">
            <summary>
            Gets the number of Transmission Control Protocol (TCP) segments sent with
            the reset flag set.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpStatistics.SegmentsReceived">
            <summary>
            Gets the number of Transmission Control Protocol (TCP) segments received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpStatistics.SegmentsResent">
            <summary>
            Gets the number of Transmission Control Protocol (TCP) segments re-sent.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.TcpStatistics.SegmentsSent">
            <summary>
            Gets the number of Transmission Control Protocol (TCP) segments sent.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.UdpStatistics">
            <summary>
            Provides User Datagram Protocol (UDP) statistical data.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.UdpStatistics.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the System.Net.NetworkInformation.UdpStatistics
            class.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UdpStatistics.DatagramsReceived">
            <summary>
            Gets the number of User Datagram Protocol (UDP) datagrams that were received.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UdpStatistics.DatagramsSent">
            <summary>
            Gets the number of User Datagram Protocol (UDP) datagrams that were sent.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UdpStatistics.IncomingDatagramsDiscarded">
            <summary>
            Gets the number of User Datagram Protocol (UDP) datagrams that were received
            and discarded because of port errors.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UdpStatistics.IncomingDatagramsWithErrors">
            <summary>
            Gets the number of User Datagram Protocol (UDP) datagrams that were received
            and discarded because of errors other than bad port information.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UdpStatistics.UdpListeners">
            <summary>
            Gets the number of local endpoints that are listening for User Datagram Protocol
            (UDP) datagrams.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation">
            <summary>
            Provides information about a network interface's unicast address.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation.#ctor">
            <summary>
            Initializes a new instance of the System.Net.NetworkInformation.UnicastIPAddressInformation
            class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation.Equals(System.Object)">
            <summary>
            Determines if this instance is equivalent to another UnicastIPAddressInformation
            </summary>
            <param name="obj">An UnicastIPAddressInformationinstance</param>
            <returns>true if equivalent, otherwise false</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation.GetHashCode">
            <summary>
            Returns a hash for a UnicastIPAddressInformation
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation.IPv4Mask">
            <summary>
            Gets the IPv4 subnet mask.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation.AddressPreferredLifetime">
            <summary>
            Gets the number of seconds remaining during which this address is the preferred
            address.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation.AddressValidLifetime">
            <summary>
            Gets the number of seconds remaining during which this address is valid.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation.DhcpLeaseLifetime">
            <summary>
            Specifies the amount of time remaining on the Dynamic Host Configuration
            Protocol (DHCP) lease for this IP address.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation.DuplicateAddressDetectionState">
            <summary>
            Gets a value that indicates the state of the duplicate address detection
            algorithm.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation.PrefixOrigin">
            <summary>
            Gets a value that identifies the source of a unicast Internet Protocol (IP)
            address prefix.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation.SuffixOrigin">
            <summary>
            Gets a value that identifies the source of a unicast Internet Protocol (IP)
            address suffix.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection">
            <summary>
            Stores a set of OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation
            types.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection.#ctor">
            <summary>
            Initializes a new instance of the OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection
            class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection.Add(OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation)">
            <summary>
            Throws a System.NotSupportedException because this operation is not supported
            for this collection.
            </summary>
            <param name="address">The object to be added to the collection.</param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection.Clear">
            <summary>
            Throws a System.NotSupportedException because this operation is not supported
            for this collection.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection.Contains(OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation)">
            <summary>
            Checks whether the collection contains the specified System.Net.NetworkInformation.UnicastIPAddressInformation
            object.
            </summary>
            <param name="address">
            The System.Net.NetworkInformation.UnicastIPAddressInformation object to be
            searched in the collection.
            </param>
            <returns>
            true if the System.Net.NetworkInformation.UnicastIPAddressInformation object
            exists in the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection.CopyTo(OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation[],System.Int32)">
            <summary>
            Copies the collection to the specified array.
            </summary>
            <param name="array">A one-dimensional array that receives a copy of the collection.</param>
            <param name="offset">The zero-based index in array at which the copy begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">
            array is multidimensional.-or- offset is equal to or greater than the length
            of array.-or- The number of elements in this OpenNETCF.Net.NetworkInformation.IPAddressInformation
            is greater than the available space from offset to the end of the destination
            array.
            </exception>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection.GetEnumerator">
            <summary>
            Returns an object that can be used to iterate through this collection.
            </summary>
            <returns>
            An object that implements the System.Collections.IEnumerator interface and
            provides access to the OpenNETCF.Net.NetworkInformation.IPAddressInformation
            types in this collection.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection.Remove(OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation)">
            <summary>
            Throws a System.NotSupportedException because this operation is not supported
            for this collection.
            </summary>
            <param name="address">The object to be removed.</param>
            <returns>Always throws a System.NotSupportedException.</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection.op_Explicit(OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection)~OpenNETCF.Net.NetworkInformation.IPAddressCollection">
            <summary>
            Gets an IPAddressCollection containing the IP addresses of the UnicastIPAddressInformationCollection
            </summary>
            <param name="c">a UnicastIPAddressInformationCollection</param>
            <returns>An IPAddressCollection</returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection.Count">
            <summary>
            Gets the number of OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation
            types in this collection.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether access to this collection is read-only.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformationCollection.Item(System.Int32)">
            <summary>
            Gets the OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation instance
            at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the element.</param>
            <returns>
            The OpenNETCF.Net.NetworkInformation.UnicastIPAddressInformation at the specified
            location.
            </returns>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.WEPStatus">
            <summary>
            Define WEP authentication state for the adapter.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WEPStatus.WEPEnabled">
            <summary>
            WEP encryption enabled
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WEPStatus.WEPDisabled">
            <summary>
            No WEP encryption
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WEPStatus.WEPKeyAbsent">
            <summary>
            WEP, TKIP and AES are disabled. A transmit key is not available.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WEPStatus.WEPNotSupported">
            <summary>
            WEP is not supported
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WEPStatus.TKIPEnabled">
            <summary>
            TKIP and WEP are enabled; AES is disabled. A transmit key is available
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WEPStatus.TKIPKeyAbsent">
            <summary>
            TKIP and WEP are enabled; AES is disabled. A transmit key is not available
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WEPStatus.AESEnabled">
            <summary>
            AES, TKIP, and WEP are enabled, and a transmit key is available.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WEPStatus.AESKeyAbsent">
            <summary>
            AES, TKIP, and WEP are enabled. A transmit keys is not available.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WEPStatus.Unknown">
            <summary>
            Unknown or unresolvable WEP Status
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.WirelessNetworkInterface">
            <summary>
            Encapsulates a non-WZC wireless network interface
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.WirelessNetworkInterface.Connect">
            <summary>
            Attempts to connect to any available preferred access point
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.WirelessNetworkInterface.Connect(System.String)">
            <summary>
            Attempts to connect to a specific Access Point
            </summary>
            <param name="SSID">The Service Set Identified or the Access Point to which a connection should be made</param>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessNetworkInterface.AssociatedAccessPoint">
            <summary>
            Returns the currently-attached SSID for RF
            Ethernet adapters.
            </summary>
            <returns>
            Instance of SSID class (or null if not associated).
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessNetworkInterface.SignalStrengthInDecibels">
            <summary>
            Returns the strength of the RF Ethernet signal
            being received by the adapter, in dB.
            </summary>
            <returns>
            integer strength in dB; zero, if adapter is not
            an RF adapter or an error occurred
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessNetworkInterface.SignalStrength">
            <summary>
            Returns a SignalStrength class representing the current strength
            of the signal.
            </summary>
            <returns>
            SignalStrength
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessNetworkInterface.InfrastructureMode">
            <summary>
            Sets or gets how this adapter connects to the network. Setting this will also reset 
            the network association algorithm.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessNetworkInterface.AuthenticationMode">
            <summary>
            Sets the IEEE 802.11 authentication mode.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessNetworkInterface.AssociatedAccessPointMAC">
            <summary>
            Gets the MAC address of the currently associated Access point
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessNetworkInterface.NetworkType">
            <summary>
            Gets the currently connected network type or sets the network type the driver should use on the next connection
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessNetworkInterface.SupportedRates">
            <summary>
            Gets an array defining the data rates, in kilobits per second (kbps), that the radio is capable of running at
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessNetworkInterface.RadioConfiguration">
            <summary>
            Gets the configuration information for the radio
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessNetworkInterface.WEPStatus">
            <summary>
            Gets the interface's WEP status
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface">
            <summary>
            Encapsulates a Wireless Zero Config (WZC) network interface
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.MakeSSIDEntry(System.String,System.Boolean,System.Byte[],System.Int32,OpenNETCF.Net.NetworkInformation.AuthenticationMode,OpenNETCF.Net.NetworkInformation.WEPStatus)">
            <summary>
            This routine is used, internally, to make entries
            for the preferred SSID list.  It centralizes the
            mapping of key data into the structure, etc.
            </summary>
            <param name="SSID">
            The SSID string for the new entry
            </param>
            <param name="bInfrastructure">
            Set to true for infrastucture mode; false for
            ad hoc mode
            </param>
            <param name="Key">
            WEP key material
            </param>
            <param name="keyIndex">
            Key index.  Valid values are 1-4
            </param>
            <param name="authMode">
            Authentication mode for the connection
            </param>
            <param name="privacyMode">
            Privacy (encryption) mode for the connection
            </param>
            <returns>
            New WZC_WLAN_CONFIG object or null on failure
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.ProcessKey(OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.KeyType,OpenNETCF.Net.NetworkInformation.WLANConfiguration@,System.String)">
            <summary>
            The ProcessKey routine makes necessary modifications
            to the key material of a WPA key before it is passed
            to WZC routines.  The processing done to it depends
            on how it was generated.
            </summary>
            <param name="kt">
            The key type, indicating how the key material in
            the structure was originally generated
            </param>
            <param name="config">
            The configuration being changed
            </param>
            <param name="passphrase">
            For WPA-PSK passphrase type, the passphrase.
            </param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.CheckKeySize(System.String,OpenNETCF.Net.NetworkInformation.AuthenticationMode,System.Byte[]@)">
            <summary>
            The CheckKeySize routine checks the incoming 
            WEP or WPA key from the user and throws an 
            exception of an appropriate type, if the key
            size is wrong or if it contains invalid
            characters.  In this case, it also maps the
            string key into a byte array of the binary
            values corresponding to the string, which should
            represent the hex values in the key.
            </summary>
            <param name="sKey">
            The string key to be used.  Must consist of a
            string of hexadecimal digits, for WEP keys and
            WPA binary keys.  May be a passphrase for WPA-PSK,
            though, which can be 8-63 characters long.
            </param>
            <param name="authMode">
            Can be any of the authentication mode types, 
            including WEP and WPA-PSK.
            </param>
            <param name="Key">
            Reference parameter into which the returned
            binary key value is written.  Will be set to
            null if the input string key is empty.
            </param>
            <returns>
            KeyType value indicating the type of the key. Note:
            for WPAPassphrase type, the caller will still have
            to encode the password before using it (Key is not
            set).  Note: for WPABinary type, the caller will
            still have to encrypt the key, although it is
            converted from hex string to binary by this routine.
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.CheckKeySize(System.Byte[],OpenNETCF.Net.NetworkInformation.AuthenticationMode)">
            <summary>
            The CheckKeySize routine checks the incoming 
            WEP or WPA key from the user and throws an 
            exception of an appropriate type, if the key
            size is wrong.
            </summary>
            <param name="Key">
            The binary key to be used.
            </param>
            <param name="authMode">
            Can be any of the authentication mode types, 
            including WEP and WPA-PSK.
            </param>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.ConnectToPreferredNetwork(System.String)">
            <summary>
            Connects to an already-configured wireless network by SSID
            </summary>
            <param name="SSID"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.AddPreferredNetwork(System.String,System.Boolean,System.String,System.Int32,OpenNETCF.Net.NetworkInformation.AuthenticationMode,OpenNETCF.Net.NetworkInformation.WEPStatus,OpenNETCF.Net.NetworkInformation.EAPParameters)">
            <summary>
            Sets wireless settings associated with a given 
            interface and AP, adding to, rather than replacing
            the preferred list of APs.  This version of the 
            method is designed for the case where *all* of 
            the options are going to be set, where no initial 
            configuration exists at all and where existing
            items in the preferred list should be maintained.
            After this method executes, if it is successful,
            the specified SSID will be at the top, highest-
            priority, end of the preferred list.
            </summary>
            <param name="SSID">
            Target SSID to connect
            </param>
            <param name="bInfrastructure">
            Is infrastructure
            </param>
            <param name="sKey">
            WEP key string representing hex string (each 
            two characters are converted to a single byte)
            </param>
            <param name="keyIndex">
            Index of the WEP key.  Valid values are 1-4
            </param>
            <param name="authMode">
            Authentication mode for the connection
            </param>
            <param name="privacyMode">
            Privacy (encryption) mode for the connection
            </param>
            <param name="eapParams">
            Parameters describing how the connection should use EAP
            to authenticate the user to the network
            </param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.AddPreferredNetwork(System.String,System.Boolean,System.Byte[],System.Int32,OpenNETCF.Net.NetworkInformation.AuthenticationMode,OpenNETCF.Net.NetworkInformation.WEPStatus,OpenNETCF.Net.NetworkInformation.EAPParameters)">
            <summary>
            Sets wireless settings associated with a given 
            interface and AP, adding the new SSID to the
            list of preferred SSID values, rather than 
            replacing the whole list.  This version of the 
            method is designed for the case where *all* of 
            the options are going to be set, where no 
            initial configuration exists at all and where the
            current SSID values in the preferred list should
            be retained.  After this call completes, if it
            is successful, the new SSID is at the top, highest-
            priority, end of the preferred list.
            </summary>
            <param name="SSID">
            Target SSID to connect
            </param>
            <param name="bInfrastructure">
            Is infrastructure
            </param>
            <param name="keyMaterial">
            WEP or WPA key.  Key is in binary format. 
            For WEP, it should contain 5 or 13 bytes of data.
            The number of bytes for WPA depends on whether a
            passphrase was used to generate it or whether it
            is the actual 32-byte binary key
            </param>
            <param name="keyIndex">
            Index of the key.  Valid values are 1-4
            </param>
            <param name="authMode">
            Authentication mode for the connection
            </param>
            <param name="privacyMode">
            Privacy (encryption) mode for the connection
            </param>
            <param name="eapParams">
            Parameters describing how the connection should use EAP
            to authenticate the user to the network
            </param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.RemovePreferredNetwork(System.String)">
            <summary>
            Removes a network from the adapter's preferred list
            </summary>
            <param name="SSID">The SSID of the network to remove</param>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.WEPStatus">
            <summary>
            Gets the WEP status for the current adapter
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.AuthenticationMode">
            <summary>
            Gets the AuthenticationMode for the current adapter
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.FallbackEnabled">
            <summary>
            Enables or disables WZC Fallback for the current adapter
            </summary>
            <returns>
            Returns true/false if WZC Fallback is enabled for the current adapter
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.NearbyAccessPoints">
            <summary>
            Returns a list of the SSID values which the 
            adapter can currently 'hear'.
            </summary>
            <returns>
            SSIDList instance containing the SSIDs.
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.PreferredAccessPoints">
            <summary>
            Returns the list of preferred SSID values which the 
            adapter is currently assigned.  Note that none of
            these might be within range, however.
            </summary>
            <returns>
            SSIDList instance containing the preferred SSIDs.
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.NearbyPreferredAccessPoints">
            <summary>
            Returns the list of preferred SSID values which the 
            adapter is currently assigned, but also updates the
            signal strengths to their current values.  Otherwise,
            the signal strengths are not really valid.
            </summary>
            <returns>
            SSIDList instance containing the preferred SSIDs.
            </returns>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.WirelessZeroConfigNetworkInterface.KeyType">
            <summary>
            The KeyType enumeration tells the Adapter what
            sort of key material is being passed.  There are
            several types for various forms of WEP and WPA
            keys.  External callers of Adapter methods should
            set it to None, however.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.WLANConfiguration">
            <summary>
            Wireless LAN config descriptor
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.SelfMarshalledStruct">
            <summary>
            Summary description for SelfMarshalledStruct.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.Length">
            <summary>
            Length of this structure
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.CtlFlags">
            <summary>
            control flags (NON-NDIS) see WZC_WEPK* constants
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.MACAddress">
            <summary>
            MAC Address
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.SSID">
            <summary>
            SSID
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.Privacy">
            <summary>
            WEP status
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.Rssi">
            <summary>
            Receive signal strength in dBm
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.NetworkTypeInUse">
            <summary>
            Network type
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.InfrastructureMode">
            <summary>
            Infrastructure mode
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.Rates">
            <summary>
            Supported data rates
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.RatesConverted">
            <summary>
            Data rates in Mbps
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.CurrentDataRate">
            <summary>
            Current connection speed (data rate)
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.KeyIndex">
            <summary>
            Selected key index
            0 is the per-client key, 1-N are the global keys
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.KeyLength">
            <summary>
            Key length
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.KeyMaterial">
            <summary>
            Key data
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.AuthenticationMode">
            <summary>
            Authentication mode
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkInformation.WLANConfiguration.EapolParams">
            <summary>
            EAP parameters
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.WLANConfigurationList">
            <summary>
            This class represents the data returned by the 
            WZCQueryInterface() call to WZC.  There are several
            values in the INTF_ENTRY struct returned by that
            query, including a couple of SSID lists (those SSID
            values currently 'audible' to the adapter and the
            preferred list).  This type is how those lists are
            returned.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkInformation.WZCControl">
            <summary>
            Control flags for Windows Zero Config
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WZCControl.WEPKPresent">
            <summary>
            specifies whether the configuration includes or not a WEP key
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WZCControl.WEPKXFormat">
            <summary>
            the WEP Key material (if any) is entered as hexadecimal digits
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WZCControl.Volatile">
            <summary>
            this configuration should not be stored
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WZCControl.Policy">
            <summary>
            this configuration is enforced by the policy
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WZCControl.ONEXEnabled">
            <summary>
            for this configuration 802.1X should be enabled
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkInformation.WZCControl.WEPK40Bit">
            <summary>
            Key is 40 bit
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.DeviceStatusMonitor">
            <summary>
            Class for receiving device notifications of all sorts (storage card
            insertions/removals, etc.)  When a change is detected, an event is 
            fired to all interested parties.  The parameters of the event 
            indicate the GUID of the device interface that changed, whether the
            device is now connected or disconnected from the system, and the
            name of the device (COM1:, for example), which changed.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.DeviceStatusMonitor.#ctor(System.Guid,System.Boolean)">
            <summary>
            Constructor for DeviceStatusMonitor.  Specifies
            the class of notifications desired and whether
            notifications should be fired for already-attached
            devices.
            </summary>
            <param name="devclass">
            GUID of device class to monitor (or Guid.Empty to 
            monitor *all* device notifications).
            </param>
            <param name="notifyAlreadyConnectedDevices">
            Set to true to receive notifiations for devices
            which were attached before we started monitoring;
            set to false to see new events only.
            </param>
        </member>
        <member name="M:OpenNETCF.Net.DeviceStatusMonitor.Finalize">
            <summary>
            Destructor stops status monitoring.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.DeviceStatusMonitor.StopStatusMonitoring">
            <summary>
            Stops the worker thread which monitors for changes of status
            of the adapter.  This must be done, if monitoring has been
            started, before the object is destroyed.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.DeviceStatusMonitor.StartStatusMonitoring">
            <summary>
            Initiates a worker thread to listen for reports of device
            changes.  Listeners can register for notification of these 
            changes, which the thread will send.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.DeviceStatusMonitor.OnDeviceNotification(OpenNETCF.Net.DeviceNotificationArgs)">
            <summary>
            Raises the DeviceNotification event.
            </summary>
            <param name="e">
            An EventArgs that contains the event data.
            </param>
        </member>
        <member name="F:OpenNETCF.Net.DeviceStatusMonitor.BLOCK_DRIVER_GUID">
            <summary>
            Fired when the block driver for a Storage Manager
            device is loaded.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.DeviceStatusMonitor.STORE_MOUNT_GUID">
            <summary>
            Fired when the store, managed by the Storage
            Manager is ready.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.DeviceStatusMonitor.FATFS_MOUNT_GUID">
            <summary>
            Fired when a FAT filesystem is loaded for a device.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.DeviceStatusMonitor.CDFS_MOUNT_GUID">
            <summary>
            Fired when a CDFS filesystem is loaded.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.DeviceStatusMonitor.UDFS_MOUNT_GUID">
            <summary>
            Fired when a UDFS filesystem is loaded.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.DeviceStatusMonitor.CDDA_MOUNT_GUID">
            <summary>
            Fired when a CDDA filesystem is loaded.
            </summary>
        </member>
        <member name="E:OpenNETCF.Net.DeviceStatusMonitor.DeviceNotification">
            <summary>
            Event fired when some aspect of the device's connected status
            has changed.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.DeviceStatusMonitor.Active">
            <summary>
            The Active property is true when the status is
            being monitored.  If status monitoring is not
            occurring, Active is false.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.DeviceNotificationEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:OpenNETCF.Net.DeviceNotificationArgs">
            <summary>
            DeviceNotificationArgs passed to interested parties
            when a device notification is fired.  Contains the
            device class GUID, a flag indicating whether the
            device is attached or detached, and the device name.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.DeviceNotificationArgs.DeviceInterfaceGUID">
            <summary>
            GUID of the interface/type/class of the device
            being attached or detached.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.DeviceNotificationArgs.DeviceAttached">
            <summary>
            True if, after the latest event, the device is
            connected; false, otherwise.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.DeviceNotificationArgs.DeviceName">
            <summary>
            The device name being attached/detached.  Might
            be a stream driver name like COM1:, or something
            more descriptive like Power Manager, depending
            on the GUID.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.DeviceNotificationArgs.#ctor(System.Guid,System.Boolean,System.String)">
            <summary>
            Constructor for notification arguments.
            </summary>
            <param name="g">Device class GUID</param>
            <param name="att">Device attached, true or false</param>
            <param name="nam">Device name</param>
        </member>
        <member name="T:OpenNETCF.Net.NetworkType">
            <summary>
            Enumeration returned in the NetworkTypeInUse property.
            Indicates the general type of radio network in use.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkType.FH">
            <summary>
            Indicates the physical layer of the frequency hopping spread-spectrum radio
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkType.DS">
            <summary>
            Indicates the physical layer of the direct sequencing spread-spectrum radio
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkType.OFDM5">
            <summary>
            Indicates the physical layer for 5-GHz Orthagonal Frequency Division Multiplexing radios
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NetworkType.OFDM24">
            <summary>
            Indicates the physical layer for 24-GHz Orthagonal Frequency Division Multiplexing radios
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.InfrastructureMode">
            <summary>
            Define the general network infrastructure mode in
            which the selected network is presently operating.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.InfrastructureMode.AdHoc">
            <summary>
            Specifies the independent basic service set (IBSS) mode. This mode is also known as ad hoc mode
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.InfrastructureMode.Infrastructure">
            <summary>
            Specifies the infrastructure mode.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.InfrastructureMode.AutoUnknown">
            <summary>
            The infrastructure mode is either set to automatic or cannot be determined.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.AuthenticationMode">
            <summary>
            Define authentication types for an adapter.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AuthenticationMode.Ndis802_11AuthModeOpen">
            <summary>
            Specifies IEEE 802.11 Open System authentication mode. In this mode, there are no checks performed during the 802.11 authentication
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AuthenticationMode.Ndis802_11AuthModeShared">
            <summary>
            Specifies IEEE 802.11 Shared Key authentication mode. This mode requires the use of a pre-shared Wired Equivalent Privacy (WEP) key for the 802.11 authentication
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AuthenticationMode.Ndis802_11AuthModeAutoSwitch">
            <summary>
            Specifies auto-switch mode. When using auto-switch mode, the device tries IEEE 802.11 Shared Key authentication mode first. If Shared Key authentication fails, the device attempts to use IEEE 802.11 Open System authentication mode.
            <remarks><b>Note</b> The use of this setting is not recommended</remarks> 
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AuthenticationMode.Ndis802_11AuthModeWPA">
            <summary>
            Specifies WPA version 1 security for infrastructure mode. Authentication is performed between the supplicant, authenticator, and authentication server over IEEE 802.1X. Encryption keys are dynamic and are derived through the authentication process
            While in this authentication mode, the device will only associate with an access point whose beacon or probe responses contain the authentication suite of type 1 (802.1X) within the WPA information element (IE).
            This authentication mode is only valid for infrastructure network modes. The driver must return NDIS_STATUS_NOT_ACCEPTED if its network mode is set to ad hoc.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AuthenticationMode.Ndis802_11AuthModeWPAPSK">
            <summary>
            Specifies WPA version 1 security for infrastructure mode. Authentication is made between the supplicant and authenticator over IEEE 802.1X. Encryption keys are dynamic and are derived through a pre-shared key used on both the supplicant and authenticator.
            While in this authentication mode, the device will only associate with an access point whose beacon or probe responses contain the authentication suite of type 2 (pre-shared key) within the WPA information element (IE).
            This authentication mode is only valid for infrastructure network modes. The driver must return NDIS_STATUS_NOT_ACCEPTED if its network mode is set to ad hoc.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AuthenticationMode.Ndis802_11AuthModeWPANone">
            <summary>
            Specifies WPA version 1 security for ad hoc mode. This setting specifies the use of a pre-shared key without IEEE 802.1X authentication. Encryption keys are static and are derived through the pre-shared key.
            This authentication mode is only valid for ad hoc network modes. The driver must return NDIS_STATUS_NOT_ACCEPTED if its network mode is set to infrastructure.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.AuthenticationMode.Ndis802_11AuthModeMax">
            <summary>
            Upper bound of Modes - not a real mode
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.WEPStatus">
            <summary>
            Define WEP authentication state for the adapter.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WEPStatus.Ndis802_11WEPEnabled">
            <summary>
            WEP encryption enabled
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WEPStatus.Ndis802_11Encryption1Enabled">
            <summary>
            WEP encryption enabled
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WEPStatus.Ndis802_11WEPDisabled">
            <summary>
            No WEP encryption
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WEPStatus.Ndis802_11EncryptionDisabled">
            <summary>
            No WEP encryption
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WEPStatus.Ndis802_11WEPKeyAbsent">
            <summary>
            WEP key is missing
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WEPStatus.Ndis802_11Encryption1KeyAbsent">
            <summary>
            WEP, TKIP and AES are disabled. A transmit key is not available.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WEPStatus.Ndis802_11WEPNotSupported">
            <summary>
            WEP is not supported
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WEPStatus.Ndis802_11EncryptionNotSupported">
            <summary>
            Encryption using the WEP, TKIP, and AES cipher suites is not supported
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WEPStatus.Ndis802_11Encryption2Enabled">
            <summary>
            TKIP and WEP are enabled; AES is disabled. A transmit key is available
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WEPStatus.Ndis802_11Encryption2KeyAbsent">
            <summary>
            TKIP and WEP are enabled; AES is disabled. A transmit key is not available
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WEPStatus.Ndis802_11Encryption3Enabled">
            <summary>
            AES, TKIP, and WEP are enabled, and a transmit key is available.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WEPStatus.Ndis802_11Encryption3KeyAbsent">
            <summary>
            AES, TKIP, and WEP are enabled. A transmit keys is not available.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.WZCControl">
            <summary>
            Control flags for Windows Zero Config
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WZCControl.WEPKPresent">
            <summary>
            specifies whether the configuration includes or not a WEP key
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WZCControl.WEPKXFormat">
            <summary>
            the WEP Key material (if any) is entered as hexadecimal digits
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WZCControl.Volatile">
            <summary>
            this configuration should not be stored
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WZCControl.Policy">
            <summary>
            this configuration is enforced by the policy
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WZCControl.ONEXEnabled">
            <summary>
            for this configuration 802.1X should be enabled
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.WZCControl.WEPK40Bit">
            <summary>
            Key is 40 bit
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.EAPType">
            <summary>
            The EAP_TYPE enumeration is used when configuring a
            connection to an EAP-enabled network.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPType.MD5">
            <summary>
            MD5 authentication
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPType.TLS">
            <summary>
            EAP-TLS authentication
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPType.PEAP">
            <summary>
            PEAP authentication
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPType.MSCHAPv2">
            <summary>
            MS-CHAP version 2 authentication
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.EAPFlags">
            <summary>
            Flags used for controlling how EAP is used
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPFlags.Disabled">
            <summary>
            No EAP
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPFlags.Enabled">
            <summary>
            EAP is on
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPFlags.MachineAuthenticationDisabled">
            <summary>
            EAP authentication by user
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPFlags.MachineAuthenticationEnabled">
            <summary>
            EAP authentication by machine (as opposed to user,
            presumably)
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPFlags.GuestAuthenticationDisabled">
            <summary>
            EAP guest login not allowed
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPFlags.GuestAuthenticationEnabled">
            <summary>
            EAP gues login allowed
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPFlags.DefaultState">
            <summary>
            This is the default configuration for all connections
            in WZC
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPFlags.DefaultMachineAuthentication">
            <summary>
            This is the default state of the machine authentication
            flag in WZC
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPFlags.DefaultGuestAuthentication">
            <summary>
            This is the default state of the guest authentication
            flag in WZC
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.EAPFlags.DefaultWZCFlags">
            <summary>
            This is the default set of flags set by WZC for 
            connections
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTFFlags.INTF_CM_MASK">
            <summary>
            mask for the configuration mode (NDIS_802_11_NETWORK_INFRASTRUCTURE value)
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTFFlags.INTF_ENABLED">
            <summary>
            zero conf enabled for this interface
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTFFlags.INTF_FALLBACK">
            <summary>
            attempt to connect to visible non-preferred networks also
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTFFlags.INTF_OIDSSUPP">
            <summary>
            802.11 OIDs are supported by the driver/firmware (can't be set)
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTFFlags.INTF_VOLATILE">
            <summary>
            the service parameters are volatile.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTFFlags.INTF_POLICY">
            <summary>
            the service parameters are enforced by the policy.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTFFlags.INTF_LDDEFWKEY">
            <summary>
            reload the default WEP_KEY
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Ftp.CommandResponse">
            <summary>
            Summary description for CommandResponse.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Ftp.FtpCommandType">
            <summary>
            Summary description for FtpMethod.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Ftp.FtpControlStream">
            <summary>
            An FTP connection has got two streams, one for sending control commands an another one for "data" retrieval and "sending"
            This stream is the Control Stream of the FTP connection, meaning it will be used to transmit control commands and
            also for checking if transmissions of those control commands was ok.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Ftp.FtpStream">
            <summary>
            Summary description for FtpStream.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Ftp.FtpStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">Source buffer for data to write</param>
            <param name="offset">Offset in the buffer at which source data begins</param>
            <param name="length">Number of bytes to write</param>
        </member>
        <member name="M:OpenNETCF.Net.Ftp.FtpStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read
            </summary>
            <param name="buffer">Buffer into which data will be read</param>
            <param name="offset">Offset in the buffer to begin placing data</param>
            <param name="length">Number of bytes to read</param>
            <returns>Actual number of bytes read</returns>
        </member>
        <member name="M:OpenNETCF.Net.Ftp.FtpStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Ftp.FtpStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Unsupported
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.Ftp.FtpStream.Flush">
            <summary>
            Has no effect on the FTP stream
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Ftp.FtpStream.SetLength(System.Int64)">
            <summary>
            Unsupported
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenNETCF.Net.Ftp.FtpStream.Dispose">
            <summary>
            Releases socket resources used by the stream
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Ftp.FtpStream.CanSeek">
            <summary>
            FTPStream are not seekable.  Returns <b>false</b>
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Ftp.FtpStream.Length">
            <summary>
            Unsupported
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Ftp.FtpStream.Position">
            <summary>
            Unsupported
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Ftp.FtpControlStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream
            </summary>
            <param name="buffer">Data to write</param>
            <param name="offset">Offset at which to begin the write</param>
            <param name="count">Number of bytes from the buffer to write</param>
        </member>
        <member name="M:OpenNETCF.Net.Ftp.FtpControlStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream
            </summary>
            <param name="buffer">Target buffer into which data will be read</param>
            <param name="offset">Offset in the buffer at which the data will be placed</param>
            <param name="length">Number of bytes to read</param>
            <returns>Number of bytes actually read</returns>
        </member>
        <member name="P:OpenNETCF.Net.Ftp.FtpControlStream.Position">
            <summary>
            Sets the current position in the stream
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Ftp.FtpControlStream.CanRead">
            <summary>
            Returns the readability status of the stream.  Always <b>true</b> for this class
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Ftp.FtpControlStream.CanWrite">
            <summary>
            Returns the writability status of the stream.  Always <b>true</b> for this class
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Ftp.FtpDataStream">
            <summary>
            An FTP connection has got two streams, one for sending control commands an another one for "data" retrieval and "sending"
            This stream is the Control Stream of the FTP connection, meaning it will be used to transmit control commands and
            also for checking if transmissions of those control commands was ok.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Ftp.FtpStatusCode">
            <summary>
            Summary description for FtpStatusCode.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Ftp.FtpWebRequest">
            <summary>
            Summary description for FtpWebRequest.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Ftp.FtpWebRequest.GetRequestStream">
            <summary>
            Gets a stream instance which you can use to WRITE request data to.
            Once the stream has been returned you can use the Write method to send data
            </summary>
            <returns>FtpDataStream</returns>
        </member>
        <member name="M:OpenNETCF.Net.Ftp.FtpWebRequest.GetResponse">
            <summary>
            Sends the request to the server and returns the response
            </summary>
            <returns>Returns an FtpWebResponse which can be used to access the response from the request</returns>
        </member>
        <member name="T:OpenNETCF.Net.Ftp.FtpWebResponse">
            <summary>
            Summary description for FtpWebResponse.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Ftp.X509CertificateCollection">
            <summary>
            Summary description for X509CertificateCollection.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NdisNotificationType">
            <summary>
            The NdisNotificationType enumeration defines the types
            of notifications which can be requested from NDIS.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NdisNotificationType.NdisResetStart">
            <summary>
            NdisResetStart is set when an adapter is being
            reset.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NdisNotificationType.NdisResetEnd">
            <summary>
            NdisResetEnd is sent when the reset process on an
            adapter is complete and the adapter is ready to be
            rebound.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NdisNotificationType.NdisMediaConnect">
            <summary>
            NdisMediaConnect is set when the communications
            media, an Ethernet cable for example, is connected
            to the adapter.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NdisNotificationType.NdisMediaDisconnect">
            <summary>
            NdisMediaDisconnect is set when the communciations
            media, an Ethernet cable for example, is disconnected
            from the adapter.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NdisNotificationType.NdisBind">
            <summary>
            NdisBind is set when one or more protocols, TCP/IP
            typically, is bound to the adapter.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NdisNotificationType.NdisUnbind">
            <summary>
            NdisUnbind is set when the adapter is unbound from
            one or more protocols.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.NdisNotificationType.NdisMediaSpecific">
            <summary>
            NdisMediaSpecific is set when some notification not
            generally defined for all adapter types occurred.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Network">
            <summary>
            Summary description for Network.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Network.MapDrive(System.IntPtr,System.String,System.String,System.String,System.String)">
            <summary>
            Maps the network resouce to the specified share name
            </summary>
            <param name="hwnd">Owner window handle</param>
            <param name="netRes">Network resource to connect</param>
            <param name="shareName">Share name</param>
            <param name="userName">User name</param>
            <param name="password">Password</param>
        </member>
        <member name="M:OpenNETCF.Net.Network.Disconnect(System.String,System.Boolean)">
            <summary>
            Disconnects the network resource
            </summary>
            <param name="shareName">Local share or remote name</param>
            <param name="force">Force disconnect</param>
        </member>
        <member name="M:OpenNETCF.Net.Network.GetRemoteName(System.String)">
            <summary>
            Returns name of the network resource
            </summary>
            <param name="shareName"></param>
            <returns>Network resource</returns>
        </member>
        <member name="M:OpenNETCF.Net.Network.GetConnectedResources">
            <summary>
            Enumerates and returns all connected network resources.
            </summary>
            <returns>Array of NetworkResource class</returns>
        </member>
        <member name="M:OpenNETCF.Net.Network.GetNetworkResources(System.String)">
            <summary>
            Enumerates network resources.
            </summary>
            <param name="remoteName">The name of the server</param>
            <returns>Array of NetworkResource class</returns>
        </member>
        <member name="T:OpenNETCF.Net.Network.NetworkErrors">
            <summary>
            Possible network errors
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.NoError">
            <summary>
            No errors
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.AccessDenied">
            <summary>
            Access is denied
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.InvalidHandle">
            <summary>
            The handle provided was invalid
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.NotEnoughMemory">
            <summary>
            Not enough memory to perform desired command
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.NotSupported">
            <summary>
            Call not supported
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.UnexpectedNetError">
            <summary>
            Unexpected network error
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.InvalidPassword">
            <summary>
            Invalid password
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.InvalidParameter">
            <summary>
            Invalid parameter
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.InvalidLevel">
            <summary>
            Invalid Level
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.Busy">
            <summary>
            Busy
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.MoreData">
            <summary>
            More data is available
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.InvalidAddress">
            <summary>
            The address provided is not valid
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.ConnectionUnavailable">
            <summary>
            A connection is not available
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.DeviceAlreadyRemembered">
            <summary>
            The device has already been remembered
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.ExtentedError">
            <summary>
            Extended error information is available
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.Cancelled">
            <summary>
            Call cancelled
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.Retry">
            <summary>
            Retry
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.BadUsername">
            <summary>
            Username is invalid
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Network.NetworkErrors.NoNetwork">
            <summary>
            No network is available
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NetworkResource">
            <summary>
            Implements NetworkResouce class
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.NetworkResource.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of a NetworkResource class
            </summary>
            <param name="shareName">Share Name</param>
            <param name="remoteName">Remote Name</param>
        </member>
        <member name="P:OpenNETCF.Net.NetworkResource.ShareName">
            <summary>
            Gets ShareName
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.NetworkResource.RemoteName">
            <summary>
            Gets Remote name.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Networking">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Networking.GetAdapters">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.Networking.NetworkOrder(System.UInt16)">
            <summary>
            This function converts a ushort from host to TCP/IP network byte order, which is big-endian.
            </summary>
            <param name="hostShort">16-bit number in host byte order.</param>
            <returns>This function returns the value in TCP/IP network byte order.</returns>
        </member>
        <member name="M:OpenNETCF.Net.Networking.NetworkOrder(System.UInt32)">
            <summary>
            This function converts a uint from host to TCP/IP network byte order, which is big-endian.
            </summary>
            <param name="hostInt">32-bit number in host byte order.</param>
            <returns>This function returns the value in TCP/IP network byte order.</returns>
        </member>
        <member name="M:OpenNETCF.Net.Networking.HostOrder(System.UInt16)">
            <summary>
            This function converts a ushort from TCP/IP network order to host byte order, which is little-endian on Intel processors.
            </summary>
            <param name="networkShort">16-bit number in TCP/IP network byte order.</param>
            <returns>This function always returns a value in host byte order. If the networkShort parameter was already in host byte order, then no operation is performed.</returns>
        </member>
        <member name="M:OpenNETCF.Net.Networking.HostOrder(System.UInt32)">
            <summary>
            This function converts a uint from TCP/IP network order to host byte order, which is little-endian on Intel processors.
            </summary>
            <param name="networkInt">32-bit number in TCP/IP network byte order.</param>
            <returns>This function always returns a value in host byte order. If the networkInt parameter was already in host byte order, then no operation is performed.</returns>
        </member>
        <member name="P:OpenNETCF.Net.NDIS_802_11_CONFIGURATION_FH.DwellTime">
            <summary>
            Amount of time dwelling in each frequency (in kusec).
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.NDIS_802_11_BSSID_LIST">
            <summary>
            This class represents the data returned by the 
            OID_802_11_BSSID_LIST query to an RF Ethernet adapter.
            It is just used during parsing of the returned data
            and really should not persist.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.StrengthAddon">
            <summary>
            Abstract class representing a 'different' method of
            finding the signal strength for a network adapter. 
            You might need to provide a subclass of this class
            when your code runs on Windows CE 3.0 or earlier or
            when the signal strength is not retrievable via the
            Windows CE.NET NDISUIO driver in the standard 802.11
            manner.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.StrengthAddon.RFSignalStrengthDB(OpenNETCF.Net.Adapter)">
            <summary>
            Abstract method.  Your subclass of StrengthAddon
            must implement this method and do whatever is 
            needed to get the RF signal strength in dB from
            the indicated adapter.  Return 0 if the adapter
            is not an RF adapter or there is an error.
            </summary>
            <param name="a">
            Instance of Adapter class for which signal strength is to be returned
            </param>
            <returns>
            int signal strength in dB or zero for error
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.StrengthAddon.RFSSID(OpenNETCF.Net.Adapter)">
            <summary>
            Abstract method.  Your subclass of StrengthAddon
            must implement this method and do whatever is 
            needed to get the current SSID from the indicated 
            adapter.  Return null if the adapter is not an RF 
            adapter, if it is not presently associated, or 
            there is an error.
            </summary>
            <param name="a">
            Instance of Adapter class for which SSID is to be returned
            </param>
            <returns>
            String SSID string or null for error or unassociated
            </returns>
        </member>
        <member name="T:OpenNETCF.Net.SignalStrength">
            <summary>
            The SignalStrength class provides a repository for the
            signal strength indication from an RF Ethernet network
            adapter.  From an instance of this class, you can get
            the signal strength in dB, an enumerated value of 
            type StrengthType indicating the relative strength, or
            a string representing the relative strength.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.SignalStrength.DBToStrength(System.Int32)">
            <summary>
            The DBToStrength static conversion function can
            be used to take a dB strength value previously
            retrieved and generate a StrengthType enumeration
            value based on the relative strength.
            </summary>
            <param name="db">
            Signal strength in dB
            </param>
            <returns>
            StrengthType indicating strength that db parameter represents
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.SignalStrength.DBToString(System.Int32)">
            <summary>
            The DBToString static conversion function allows a
            signal strength value in dB previously retrieved
            to be converted into the string representation of
            its relative signal strength.
            </summary>
            <param name="db">
            Signal strength in dB.
            </param>
            <returns>
            String: "No Signal", "Very Low", "Low", "Good", 
            "Very Good", "Excellent", or 
            "Not a wireless adapter". 
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.SignalStrength.StrengthToString(OpenNETCF.Net.StrengthType)">
            <summary>
            The StrengthToString static conversion function
            allows a previously stored signal strength 
            enumeration value to be converted into its string
            representation.
            </summary>
            <param name="st">
            One of the SignalStrength enumeration values.
            </param>
            <returns>
            String: "No Signal", "Very Low", "Low", "Good", 
            "Very Good", "Excellent", or 
            "Not a wireless adapter". 
            </returns>
        </member>
        <member name="M:OpenNETCF.Net.SignalStrength.ToString">
            <summary>
            Converts strength to string representing relative
            strength ("Good", "Low", etc.)
            </summary>
            <returns>
            String: "No Signal", "Very Low", "Low", "Good", 
            "Very Good", "Excellent", or 
            "Not a wireless adapter". 
            </returns>
        </member>
        <member name="P:OpenNETCF.Net.SignalStrength.Decibels">
            <summary>
            The Decibels property returns the signal strength
            in dB.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.SignalStrength.Strength">
            <summary>
            Strength of signal as enumerated type.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.StrengthType">
            <summary>
            The StrengthType enumeration provides a list of 
            relative RF Ethernet signal strength values that 
            correspond to the strengths displayed by Windows CE
            itself.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.StrengthType.NotAWirelessAdapter">
            <summary>
            The adapter for which signal strength was requested is not
            a wireless network adapter or does not report its signal
            strength in the standard way
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.StrengthType.NoSignal">
            <summary>
            The adapter is not receiving a network signal
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.StrengthType.VeryLow">
            <summary>
            The network signal has very low strength
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.StrengthType.Low">
            <summary>
            The network signal has low strength
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.StrengthType.Good">
            <summary>
            The network signal is good
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.StrengthType.VeryGood">
            <summary>
            The network signal is very good
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.StrengthType.Excellent">
            <summary>
            The network signal is excellent
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.INTF_ENTRY">
            <summary>
            Interface Entry for WZC
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTF_ENTRY.dwCtlFlags">
            <summary>
            control flags (see INTFCTL_* defines)
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTF_ENTRY.dwCapabilities">
            <summary>
            capabilities flags (see INTFCAP_* defines)
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTF_ENTRY.rdSSID">
            <summary>
            encapsulates the SSID raw binary
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTF_ENTRY.rdBSSID">
            <summary>
            encapsulates the BSSID raw binary
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTF_ENTRY.rdBSSIDList">
            <summary>
            encapsulates one WZC_802_11_CONFIG_LIST structure
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTF_ENTRY.rdStSSIDList">
            <summary>
            encapsulates one WZC_802_11_CONFIG_LIST structure
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTF_ENTRY.rdCtrlData">
            <summary>
            data for various control actions on the interface
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.INTF_ENTRY.bInitialized">
            <summary>
            To track caller that freeing the same structure more than one time..
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.INTF_ENTRY.GetEntry(System.String)">
            <summary>
            Creates a new entry with given name in memory 
            </summary>
            <param name="guid">Name</param>
            <returns>Entry</returns>
        </member>
        <member name="M:OpenNETCF.Net.INTF_ENTRY.ToString">
            <summary>
            Overriden
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Net.INTF_ENTRY.SSID">
            <summary>
            SSID
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.INTF_ENTRY.Guid">
            <summary>
            Entry name
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.INTF_ENTRY.Description">
            <summary>
            Entry description
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.RAW_DATA">
            <summary>
            Encapsulates generic data blob
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.INTFS_KEY_TABLE">
            <summary>
            List of interface names
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.WLANConfiguration">
            <summary>
            Wireless LAN config descriptor
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.Length">
            <summary>
            Length of this structure
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.CtlFlags">
            <summary>
            control flags (NON-NDIS) see WZC_WEPK* constants
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.MACAddress">
            <summary>
            MAC Address
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.SSID">
            <summary>
            SSID
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.Privacy">
            <summary>
            WEP status
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.Rssi">
            <summary>
            Receive signal strength in dBm
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.NetworkTypeInUse">
            <summary>
            Network type
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.InfrastructureMode">
            <summary>
            Infrastructure mode
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.Rates">
            <summary>
            Supported data rates
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.RatesConverted">
            <summary>
            Data rates in Mbps
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.CurrentDataRate">
            <summary>
            Current connection speed (data rate)
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.KeyIndex">
            <summary>
            Selected key index
            0 is the per-client key, 1-N are the global keys
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.KeyLength">
            <summary>
            Key length
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.KeyMaterial">
            <summary>
            Key data
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.AuthenticationMode">
            <summary>
            Authentication mode
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.WLANConfiguration.EapolParams">
            <summary>
            EAP parameters
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.WLANConfigurationList">
            <summary>
            This class represents the data returned by the 
            WZCQueryInterface() call to WZC.  There are several
            values in the INTF_ENTRY struct returned by that
            query, including a couple of SSID lists (those SSID
            values currently 'audible' to the adapter and the
            preferred list).  This type is how those lists are
            returned.
            </summary>
        </member>
    </members>
</doc>
